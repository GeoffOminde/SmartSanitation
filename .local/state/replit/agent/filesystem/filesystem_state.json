{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Smart Sanitation Management Platform\n\n## Overview\n\nThis is a cloud-native, multi-tenant SaaS platform for managing mobile-toilet fleets using IoT telemetry, route optimization, dynamic pricing, and mobile-money payments. The system targets operators in East Africa (Kenya, Uganda, Tanzania) and combines real-time monitoring, predictive maintenance, and customer booking capabilities to reduce emergency servicing and increase fleet utilization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React SPA**: Built with TypeScript and Vite for fast development and building\n- **Component Library**: shadcn/ui components with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom design system variables and dark mode support\n- **State Management**: TanStack Query for server state and caching\n- **Routing**: Wouter for client-side routing\n- **Real-time Updates**: WebSocket integration for live telemetry and alerts\n\n### Backend Architecture\n- **Runtime**: Node.js with Express server using TypeScript and ES modules\n- **API Design**: RESTful endpoints with WebSocket support for real-time features\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Session Management**: Express sessions with PostgreSQL session store\n- **Real-time Communication**: WebSocket server for broadcasting telemetry updates and alerts\n\n### Data Architecture\n- **Database**: PostgreSQL with TimescaleDB for time-series telemetry data\n- **Schema Design**: Multi-tenant structure with operators, units, telemetry, bookings, routes, and maintenance logs\n- **Time-series Storage**: Optimized for IoT sensor data with efficient querying\n- **Validation**: Zod schemas for runtime type validation and API input validation\n\n### Authentication & Authorization\n- **Session-based Auth**: Server-side session management with secure cookies\n- **Multi-tenant**: Operator-based data isolation with role-based access control\n- **Field Staff Management**: Different permission levels for operators and field workers\n\n### Integration Architecture\n- **Payment Processing**: M-Pesa Daraja API integration for mobile money payments\n- **IoT Connectivity**: MQTT/HTTPS endpoints for device telemetry ingestion\n- **Communication**: SMS/WhatsApp notifications via Twilio\n- **Maps Integration**: Prepared for mapping services integration\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: PostgreSQL with TimescaleDB extension\n- **Session Storage**: PostgreSQL-based session store using connect-pg-simple\n- **WebSocket**: Native WebSocket implementation for real-time features\n\n### Payment Systems\n- **Stripe**: Payment processing infrastructure (React Stripe.js integration)\n- **M-Pesa**: Mobile money integration for East African markets\n\n### Development & Deployment\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle Kit**: Database migrations and schema management\n- **Vite**: Frontend build tool with hot module replacement\n- **ESBuild**: Backend bundling for production deployment\n\n### UI & Component Libraries\n- **Radix UI**: Accessible component primitives for forms, navigation, and overlays\n- **Lucide React**: Consistent icon system\n- **date-fns**: Date formatting and manipulation\n- **React Hook Form**: Form handling with validation\n\n### Communication & Monitoring\n- **Twilio**: SMS and WhatsApp messaging capabilities\n- **WebSocket**: Real-time telemetry and alert broadcasting\n- **TanStack Query**: Efficient data fetching and caching with background updates","size_bytes":3583},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { \n  insertTelemetrySchema, \n  insertBookingSchema, \n  insertCustomerSchema,\n  insertUnitSchema,\n  insertRouteSchema,\n  insertMaintenanceLogSchema \n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const clients = new Set<WebSocket>();\n  \n  wss.on('connection', (ws) => {\n    clients.add(ws);\n    \n    ws.on('close', () => {\n      clients.delete(ws);\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      clients.delete(ws);\n    });\n  });\n\n  // Helper function to broadcast to all connected clients\n  const broadcast = (data: any) => {\n    const message = JSON.stringify(data);\n    clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(message);\n      }\n    });\n  };\n\n  // ========== TELEMETRY ENDPOINTS ==========\n\n  // Ingest telemetry data from IoT devices\n  app.post(\"/api/v1/devices/:deviceId/telemetry\", async (req, res) => {\n    try {\n      const { deviceId } = req.params;\n      \n      // Find unit by serial number\n      const units = await storage.getUnits();\n      const unit = units.find(u => u.serialNo === deviceId);\n      \n      if (!unit) {\n        return res.status(404).json({ message: \"Device not found\" });\n      }\n\n      const telemetryData = insertTelemetrySchema.parse({\n        ...req.body,\n        unitId: unit.id,\n      });\n\n      const telemetry = await storage.insertTelemetry(telemetryData);\n      \n      // Update unit location and status if provided\n      if (telemetryData.latitude && telemetryData.longitude) {\n        await storage.updateUnitLocation(\n          unit.id, \n          Number(telemetryData.latitude), \n          Number(telemetryData.longitude)\n        );\n      }\n\n      // Check if unit needs service and update status\n      if (telemetryData.fillLevelPct && telemetryData.fillLevelPct > 85) {\n        await storage.updateUnitStatus(unit.id, \"needs_service\");\n      }\n\n      // Broadcast real-time update\n      broadcast({\n        type: 'telemetry_update',\n        unitId: unit.id,\n        data: telemetry,\n      });\n\n      res.json({ success: true, id: telemetry.id });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // ========== UNITS ENDPOINTS ==========\n\n  // Get all units with optional filtering\n  app.get(\"/api/v1/units\", async (req, res) => {\n    try {\n      const { operatorId, status } = req.query;\n      \n      let units = await storage.getUnits(operatorId as string);\n      \n      if (status) {\n        units = units.filter(unit => unit.status === status);\n      }\n\n      // Get latest telemetry for each unit\n      const unitsWithTelemetry = await Promise.all(\n        units.map(async (unit) => {\n          const latestTelemetry = await storage.getLatestTelemetry(unit.id);\n          return {\n            ...unit,\n            latestTelemetry,\n          };\n        })\n      );\n\n      res.json(unitsWithTelemetry);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get unit by ID with telemetry history\n  app.get(\"/api/v1/units/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { from, to } = req.query;\n      \n      const unit = await storage.getUnit(id);\n      if (!unit) {\n        return res.status(404).json({ message: \"Unit not found\" });\n      }\n\n      let telemetryHistory = [];\n      if (from && to) {\n        telemetryHistory = await storage.getTelemetryHistory(\n          id, \n          new Date(from as string), \n          new Date(to as string)\n        );\n      }\n\n      res.json({\n        ...unit,\n        telemetryHistory,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Create new unit\n  app.post(\"/api/v1/units\", async (req, res) => {\n    try {\n      const unitData = insertUnitSchema.parse(req.body);\n      const unit = await storage.createUnit(unitData);\n      \n      broadcast({\n        type: 'unit_added',\n        data: unit,\n      });\n\n      res.status(201).json(unit);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // ========== BOOKINGS ENDPOINTS ==========\n\n  // Get bookings\n  app.get(\"/api/v1/bookings\", async (req, res) => {\n    try {\n      const { operatorId, limit } = req.query;\n      const bookings = await storage.getBookings(\n        operatorId as string, \n        limit ? parseInt(limit as string) : undefined\n      );\n      res.json(bookings);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Create booking\n  app.post(\"/api/v1/bookings\", async (req, res) => {\n    try {\n      const bookingData = req.body;\n      \n      // Check if customer exists, create if not\n      let customer = await storage.getCustomerByPhone(bookingData.customerPhone);\n      if (!customer) {\n        const customerData = insertCustomerSchema.parse({\n          name: bookingData.customerName,\n          phone: bookingData.customerPhone,\n          email: bookingData.customerEmail,\n          address: bookingData.location,\n        });\n        customer = await storage.createCustomer(customerData);\n      }\n\n      const booking = await storage.createBooking({\n        customerId: customer.id,\n        operatorId: bookingData.operatorId,\n        serviceType: bookingData.serviceType,\n        startDate: new Date(bookingData.startDate),\n        location: bookingData.location,\n        price: bookingData.price.toString(),\n        specialInstructions: bookingData.specialInstructions,\n      });\n\n      // For MVP, simulate M-Pesa payment request\n      const mpesaPaymentRequest = {\n        checkoutRequestId: `CHK_${Date.now()}`,\n        merchantRequestId: `MER_${Date.now()}`,\n        amount: bookingData.price,\n        phoneNumber: customer.phone,\n      };\n\n      res.status(201).json({\n        booking,\n        paymentRequest: mpesaPaymentRequest,\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // M-Pesa callback (simulation for MVP)\n  app.post(\"/api/v1/payments/mpesa/callback\", async (req, res) => {\n    try {\n      const { checkoutRequestId, resultCode, amount, mpesaReceiptNumber } = req.body;\n      \n      // Find booking by payment reference (simplified)\n      const bookings = await storage.getBookings();\n      const booking = bookings.find(b => \n        b.paymentRef === checkoutRequestId || \n        b.id === req.body.bookingId\n      );\n\n      if (booking) {\n        if (resultCode === \"0\") {\n          // Payment successful\n          await storage.updateBookingPayment(booking.id, \"paid\", mpesaReceiptNumber);\n          \n          broadcast({\n            type: 'payment_success',\n            bookingId: booking.id,\n            amount,\n          });\n        } else {\n          // Payment failed\n          await storage.updateBookingPayment(booking.id, \"failed\");\n        }\n      }\n\n      res.json({ ResultCode: 0, ResultDesc: \"Accepted\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ========== ROUTES ENDPOINTS ==========\n\n  // Get routes\n  app.get(\"/api/v1/routes\", async (req, res) => {\n    try {\n      const { operatorId, date } = req.query;\n      const routes = await storage.getRoutes(\n        operatorId as string,\n        date ? new Date(date as string) : undefined\n      );\n\n      // Get route stops for each route\n      const routesWithStops = await Promise.all(\n        routes.map(async (route) => {\n          const stops = await storage.getRouteStops(route.id);\n          return { ...route, stops };\n        })\n      );\n\n      res.json(routesWithStops);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Generate daily route (basic TSP optimization)\n  app.post(\"/api/v1/routes/daily\", async (req, res) => {\n    try {\n      const { operatorId, maxDistance = 50 } = req.body;\n      \n      // Get units needing service\n      const fillLevels = await storage.getUnitFillLevels(operatorId);\n      const unitsNeedingService = fillLevels.filter(level => level.fillLevel > 60);\n      \n      if (unitsNeedingService.length === 0) {\n        return res.json({ message: \"No units require service\" });\n      }\n\n      // Basic route optimization (simplified)\n      const route = await storage.createRoute({\n        operatorId,\n        name: `Daily Route ${new Date().toISOString().split('T')[0]}`,\n        scheduledDate: new Date(),\n        estimatedDuration: unitsNeedingService.length * 30, // 30 min per unit\n        totalDistance: unitsNeedingService.length * 5, // Estimate 5km per unit\n      });\n\n      res.json({\n        route,\n        unitsToService: unitsNeedingService.length,\n        estimatedDuration: route.estimatedDuration,\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // ========== ANALYTICS ENDPOINTS ==========\n\n  // Get fleet statistics\n  app.get(\"/api/v1/analytics/fleet-stats\", async (req, res) => {\n    try {\n      const { operatorId } = req.query;\n      const stats = await storage.getFleetStats(operatorId as string);\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get revenue statistics\n  app.get(\"/api/v1/analytics/revenue\", async (req, res) => {\n    try {\n      const { operatorId, from, to } = req.query;\n      const stats = await storage.getRevenueStats(\n        operatorId as string,\n        from ? new Date(from as string) : undefined,\n        to ? new Date(to as string) : undefined\n      );\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Get utilization report\n  app.get(\"/api/v1/reports/utilization\", async (req, res) => {\n    try {\n      const { operatorId, from, to, format = 'json' } = req.query;\n      \n      const fillLevels = await storage.getUnitFillLevels(operatorId as string);\n      const fleetStats = await storage.getFleetStats(operatorId as string);\n      \n      const report = {\n        generatedAt: new Date(),\n        period: { from, to },\n        averageUtilization: fleetStats.averageUtilization,\n        totalUnits: fleetStats.totalUnits,\n        activeUnits: fleetStats.activeUnits,\n        unitsNeedingService: fleetStats.unitsNeedingService,\n        unitDetails: fillLevels,\n      };\n\n      if (format === 'csv') {\n        // Convert to CSV format\n        const csv = [\n          'Unit ID,Fill Level,Last Update',\n          ...fillLevels.map(level => \n            `${level.unitId},${level.fillLevel},${level.lastUpdate}`\n          )\n        ].join('\\n');\n        \n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', 'attachment; filename=utilization-report.csv');\n        res.send(csv);\n      } else {\n        res.json(report);\n      }\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // ========== MAINTENANCE ENDPOINTS ==========\n\n  // Get maintenance logs\n  app.get(\"/api/v1/maintenance\", async (req, res) => {\n    try {\n      const { unitId } = req.query;\n      const logs = await storage.getMaintenanceLogs(unitId as string);\n      res.json(logs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Create maintenance log\n  app.post(\"/api/v1/maintenance\", async (req, res) => {\n    try {\n      const logData = insertMaintenanceLogSchema.parse(req.body);\n      const log = await storage.createMaintenanceLog(logData);\n      \n      broadcast({\n        type: 'maintenance_scheduled',\n        data: log,\n      });\n\n      res.status(201).json(log);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Get overdue maintenance units\n  app.get(\"/api/v1/maintenance/overdue\", async (req, res) => {\n    try {\n      const { operatorId } = req.query;\n      const units = await storage.getOverdueMaintenanceUnits(operatorId as string);\n      res.json(units);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":12588},"server/storage.ts":{"content":"import {\n  operators,\n  units,\n  telemetry,\n  customers,\n  bookings,\n  routes,\n  routeStops,\n  maintenanceLogs,\n  transactions,\n  fieldStaff,\n  type Operator,\n  type InsertOperator,\n  type Unit,\n  type InsertUnit,\n  type Telemetry,\n  type InsertTelemetry,\n  type Customer,\n  type InsertCustomer,\n  type Booking,\n  type InsertBooking,\n  type Route,\n  type InsertRoute,\n  type RouteStop,\n  type MaintenanceLog,\n  type InsertMaintenanceLog,\n  type Transaction,\n  type InsertTransaction,\n  type FieldStaff,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql, avg, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Operators\n  getOperator(id: string): Promise<Operator | undefined>;\n  createOperator(operator: InsertOperator): Promise<Operator>;\n  \n  // Units\n  getUnits(operatorId?: string): Promise<Unit[]>;\n  getUnit(id: string): Promise<Unit | undefined>;\n  createUnit(unit: InsertUnit): Promise<Unit>;\n  updateUnitLocation(id: string, latitude: number, longitude: number, location?: string): Promise<void>;\n  updateUnitStatus(id: string, status: string): Promise<void>;\n  \n  // Telemetry\n  insertTelemetry(telemetryData: InsertTelemetry): Promise<Telemetry>;\n  getLatestTelemetry(unitId: string): Promise<Telemetry | undefined>;\n  getTelemetryHistory(unitId: string, from: Date, to: Date): Promise<Telemetry[]>;\n  getUnitFillLevels(operatorId?: string): Promise<Array<{ unitId: string; fillLevel: number; lastUpdate: Date }>>;\n  \n  // Customers\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomerByPhone(phone: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  \n  // Bookings\n  getBookings(operatorId?: string, limit?: number): Promise<Booking[]>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBookingStatus(id: string, status: string): Promise<void>;\n  updateBookingPayment(id: string, paymentStatus: string, paymentRef?: string): Promise<void>;\n  \n  // Routes\n  getRoutes(operatorId?: string, date?: Date): Promise<Route[]>;\n  getRoute(id: string): Promise<Route | undefined>;\n  createRoute(route: InsertRoute): Promise<Route>;\n  updateRouteStatus(id: string, status: string): Promise<void>;\n  getRouteStops(routeId: string): Promise<RouteStop[]>;\n  \n  // Maintenance\n  getMaintenanceLogs(unitId?: string): Promise<MaintenanceLog[]>;\n  createMaintenanceLog(log: InsertMaintenanceLog): Promise<MaintenanceLog>;\n  getOverdueMaintenanceUnits(operatorId?: string): Promise<Unit[]>;\n  \n  // Analytics\n  getFleetStats(operatorId?: string): Promise<{\n    totalUnits: number;\n    activeUnits: number;\n    unitsNeedingService: number;\n    averageUtilization: number;\n  }>;\n  \n  getRevenueStats(operatorId?: string, from?: Date, to?: Date): Promise<{\n    totalRevenue: number;\n    transactionCount: number;\n    averageBookingValue: number;\n  }>;\n  \n  // Field Staff\n  getFieldStaff(operatorId?: string): Promise<FieldStaff[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Operators\n  async getOperator(id: string): Promise<Operator | undefined> {\n    const [operator] = await db.select().from(operators).where(eq(operators.id, id));\n    return operator;\n  }\n\n  async createOperator(insertOperator: InsertOperator): Promise<Operator> {\n    const [operator] = await db\n      .insert(operators)\n      .values(insertOperator)\n      .returning();\n    return operator;\n  }\n\n  // Units\n  async getUnits(operatorId?: string): Promise<Unit[]> {\n    if (operatorId) {\n      return await db.select().from(units).where(eq(units.operatorId, operatorId));\n    }\n    return await db.select().from(units);\n  }\n\n  async getUnit(id: string): Promise<Unit | undefined> {\n    const [unit] = await db.select().from(units).where(eq(units.id, id));\n    return unit;\n  }\n\n  async createUnit(insertUnit: InsertUnit): Promise<Unit> {\n    const [unit] = await db\n      .insert(units)\n      .values(insertUnit)\n      .returning();\n    return unit;\n  }\n\n  async updateUnitLocation(id: string, latitude: number, longitude: number, location?: string): Promise<void> {\n    await db\n      .update(units)\n      .set({\n        latitude: latitude.toString(),\n        longitude: longitude.toString(),\n        location,\n        lastSeenAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(units.id, id));\n  }\n\n  async updateUnitStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(units)\n      .set({\n        status,\n        updatedAt: new Date(),\n      })\n      .where(eq(units.id, id));\n  }\n\n  // Telemetry\n  async insertTelemetry(telemetryData: InsertTelemetry): Promise<Telemetry> {\n    const [inserted] = await db\n      .insert(telemetry)\n      .values(telemetryData)\n      .returning();\n    return inserted;\n  }\n\n  async getLatestTelemetry(unitId: string): Promise<Telemetry | undefined> {\n    const [latest] = await db\n      .select()\n      .from(telemetry)\n      .where(eq(telemetry.unitId, unitId))\n      .orderBy(desc(telemetry.timestamp))\n      .limit(1);\n    return latest;\n  }\n\n  async getTelemetryHistory(unitId: string, from: Date, to: Date): Promise<Telemetry[]> {\n    return await db\n      .select()\n      .from(telemetry)\n      .where(\n        and(\n          eq(telemetry.unitId, unitId),\n          gte(telemetry.timestamp, from),\n          lte(telemetry.timestamp, to)\n        )\n      )\n      .orderBy(desc(telemetry.timestamp));\n  }\n\n  async getUnitFillLevels(operatorId?: string): Promise<Array<{ unitId: string; fillLevel: number; lastUpdate: Date }>> {\n    const query = db\n      .select({\n        unitId: telemetry.unitId,\n        fillLevel: telemetry.fillLevelPct,\n        lastUpdate: telemetry.timestamp,\n      })\n      .from(telemetry)\n      .innerJoin(units, eq(telemetry.unitId, units.id))\n      .orderBy(desc(telemetry.timestamp));\n\n    if (operatorId) {\n      query.where(eq(units.operatorId, operatorId));\n    }\n\n    const results = await query;\n    \n    // Get latest reading for each unit\n    const latestReadings = new Map();\n    results.forEach(reading => {\n      if (!latestReadings.has(reading.unitId) || \n          reading.lastUpdate > latestReadings.get(reading.unitId).lastUpdate) {\n        latestReadings.set(reading.unitId, {\n          unitId: reading.unitId,\n          fillLevel: reading.fillLevel || 0,\n          lastUpdate: reading.lastUpdate,\n        });\n      }\n    });\n\n    return Array.from(latestReadings.values());\n  }\n\n  // Customers\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.id, id));\n    return customer;\n  }\n\n  async getCustomerByPhone(phone: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.phone, phone));\n    return customer;\n  }\n\n  async createCustomer(insertCustomer: InsertCustomer): Promise<Customer> {\n    const [customer] = await db\n      .insert(customers)\n      .values(insertCustomer)\n      .returning();\n    return customer;\n  }\n\n  // Bookings\n  async getBookings(operatorId?: string, limit = 50): Promise<Booking[]> {\n    const query = db\n      .select()\n      .from(bookings)\n      .orderBy(desc(bookings.createdAt))\n      .limit(limit);\n\n    if (operatorId) {\n      query.where(eq(bookings.operatorId, operatorId));\n    }\n\n    return await query;\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.id, id));\n    return booking;\n  }\n\n  async createBooking(insertBooking: InsertBooking): Promise<Booking> {\n    const [booking] = await db\n      .insert(bookings)\n      .values(insertBooking)\n      .returning();\n    return booking;\n  }\n\n  async updateBookingStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(bookings)\n      .set({\n        bookingStatus: status,\n        updatedAt: new Date(),\n      })\n      .where(eq(bookings.id, id));\n  }\n\n  async updateBookingPayment(id: string, paymentStatus: string, paymentRef?: string): Promise<void> {\n    await db\n      .update(bookings)\n      .set({\n        paymentStatus,\n        paymentRef,\n        updatedAt: new Date(),\n      })\n      .where(eq(bookings.id, id));\n  }\n\n  // Routes\n  async getRoutes(operatorId?: string, date?: Date): Promise<Route[]> {\n    let query = db\n      .select()\n      .from(routes)\n      .orderBy(desc(routes.scheduledDate));\n\n    const conditions = [];\n    if (operatorId) {\n      conditions.push(eq(routes.operatorId, operatorId));\n    }\n    if (date) {\n      conditions.push(sql`DATE(${routes.scheduledDate}) = DATE(${date})`);\n    }\n    \n    if (conditions.length > 0) {\n      query = query.where(conditions.length === 1 ? conditions[0] : and(...conditions));\n    }\n\n    return await query;\n  }\n\n  async getRoute(id: string): Promise<Route | undefined> {\n    const [route] = await db.select().from(routes).where(eq(routes.id, id));\n    return route;\n  }\n\n  async createRoute(insertRoute: InsertRoute): Promise<Route> {\n    const [route] = await db\n      .insert(routes)\n      .values(insertRoute)\n      .returning();\n    return route;\n  }\n\n  async updateRouteStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(routes)\n      .set({\n        status,\n        updatedAt: new Date(),\n      })\n      .where(eq(routes.id, id));\n  }\n\n  async getRouteStops(routeId: string): Promise<RouteStop[]> {\n    return await db\n      .select()\n      .from(routeStops)\n      .where(eq(routeStops.routeId, routeId))\n      .orderBy(routeStops.stopOrder);\n  }\n\n  // Maintenance\n  async getMaintenanceLogs(unitId?: string): Promise<MaintenanceLog[]> {\n    const query = db\n      .select()\n      .from(maintenanceLogs)\n      .orderBy(desc(maintenanceLogs.createdAt));\n\n    if (unitId) {\n      query.where(eq(maintenanceLogs.unitId, unitId));\n    }\n\n    return await query;\n  }\n\n  async createMaintenanceLog(insertLog: InsertMaintenanceLog): Promise<MaintenanceLog> {\n    const [log] = await db\n      .insert(maintenanceLogs)\n      .values(insertLog)\n      .returning();\n    return log;\n  }\n\n  async getOverdueMaintenanceUnits(operatorId?: string): Promise<Unit[]> {\n    // Units that haven't had maintenance in 30+ days or have scheduled maintenance overdue\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const query = db\n      .select()\n      .from(units)\n      .leftJoin(maintenanceLogs, eq(units.id, maintenanceLogs.unitId))\n      .where(\n        and(\n          operatorId ? eq(units.operatorId, operatorId) : sql`1=1`,\n          sql`${maintenanceLogs.completedDate} IS NULL OR ${maintenanceLogs.completedDate} < ${thirtyDaysAgo}`\n        )\n      );\n\n    const results = await query;\n    return results.map(result => result.units);\n  }\n\n  // Analytics\n  async getFleetStats(operatorId?: string): Promise<{\n    totalUnits: number;\n    activeUnits: number;\n    unitsNeedingService: number;\n    averageUtilization: number;\n  }> {\n    const baseQuery = operatorId ? \n      db.select().from(units).where(eq(units.operatorId, operatorId)) :\n      db.select().from(units);\n\n    const allUnits = await baseQuery;\n    const totalUnits = allUnits.length;\n    const activeUnits = allUnits.filter(unit => unit.status === 'active').length;\n\n    // Get fill levels to determine units needing service\n    const fillLevels = await this.getUnitFillLevels(operatorId);\n    const unitsNeedingService = fillLevels.filter(level => level.fillLevel > 80).length;\n\n    // Calculate average utilization (simplified - based on fill levels)\n    const averageUtilization = fillLevels.length > 0 \n      ? fillLevels.reduce((sum, level) => sum + level.fillLevel, 0) / fillLevels.length \n      : 0;\n\n    return {\n      totalUnits,\n      activeUnits,\n      unitsNeedingService,\n      averageUtilization,\n    };\n  }\n\n  async getRevenueStats(operatorId?: string, from?: Date, to?: Date): Promise<{\n    totalRevenue: number;\n    transactionCount: number;\n    averageBookingValue: number;\n  }> {\n    const conditions = [eq(bookings.paymentStatus, 'paid')];\n    if (operatorId) {\n      conditions.push(eq(bookings.operatorId, operatorId));\n    }\n    if (from && to) {\n      conditions.push(gte(bookings.createdAt, from));\n      conditions.push(lte(bookings.createdAt, to));\n    }\n\n    const query = db\n      .select({\n        totalRevenue: sql<number>`COALESCE(SUM(${bookings.price}), 0)`,\n        transactionCount: count(),\n        averageBookingValue: avg(bookings.price),\n      })\n      .from(bookings)\n      .where(and(...conditions));\n\n    const [result] = await query;\n    \n    return {\n      totalRevenue: Number(result.totalRevenue) || 0,\n      transactionCount: result.transactionCount || 0,\n      averageBookingValue: Number(result.averageBookingValue) || 0,\n    };\n  }\n\n  // Field Staff\n  async getFieldStaff(operatorId?: string): Promise<FieldStaff[]> {\n    const query = db.select().from(fieldStaff);\n    \n    if (operatorId) {\n      query.where(eq(fieldStaff.operatorId, operatorId));\n    }\n\n    return await query;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13153},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  integer,\n  boolean,\n  uuid,\n  real,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Operators table\nexport const operators = pgTable(\"operators\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  phone: varchar(\"phone\", { length: 50 }),\n  companyName: varchar(\"company_name\", { length: 255 }),\n  subscriptionTier: varchar(\"subscription_tier\", { length: 50 }).default(\"starter\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Field staff table\nexport const fieldStaff = pgTable(\"field_staff\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  operatorId: uuid(\"operator_id\").notNull().references(() => operators.id),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 50 }).notNull(),\n  role: varchar(\"role\", { length: 50 }).default(\"driver\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Units table\nexport const units = pgTable(\"units\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  operatorId: uuid(\"operator_id\").notNull().references(() => operators.id),\n  serialNo: varchar(\"serial_no\", { length: 100 }).notNull().unique(),\n  model: varchar(\"model\", { length: 100 }),\n  installDate: timestamp(\"install_date\"),\n  status: varchar(\"status\", { length: 50 }).default(\"active\"), // active, idle, maintenance, offline\n  lastSeenAt: timestamp(\"last_seen_at\"),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 7 }),\n  longitude: decimal(\"longitude\", { precision: 10, scale: 7 }),\n  location: varchar(\"location\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Telemetry table (TimescaleDB hypertable)\nexport const telemetry = pgTable(\"telemetry\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  unitId: uuid(\"unit_id\").notNull().references(() => units.id),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n  fillLevelPct: real(\"fill_level_pct\"),\n  doorOpenCount: integer(\"door_open_count\"),\n  batteryVoltage: real(\"battery_voltage\"),\n  temperature: real(\"temperature\"),\n  airQuality: real(\"air_quality\"),\n  gpsSpeed: real(\"gps_speed\"),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 7 }),\n  longitude: decimal(\"longitude\", { precision: 10, scale: 7 }),\n}, (table) => [\n  index(\"idx_telemetry_unit_timestamp\").on(table.unitId, table.timestamp),\n  index(\"idx_telemetry_timestamp\").on(table.timestamp),\n]);\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  email: varchar(\"email\", { length: 255 }),\n  phone: varchar(\"phone\", { length: 50 }).notNull(),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Bookings table\nexport const bookings = pgTable(\"bookings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").notNull().references(() => customers.id),\n  operatorId: uuid(\"operator_id\").notNull().references(() => operators.id),\n  unitId: uuid(\"unit_id\").references(() => units.id),\n  serviceType: varchar(\"service_type\", { length: 100 }).notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\"),\n  location: varchar(\"location\", { length: 255 }).notNull(),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 7 }),\n  longitude: decimal(\"longitude\", { precision: 10, scale: 7 }),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  paymentStatus: varchar(\"payment_status\", { length: 50 }).default(\"pending\"), // pending, paid, failed, refunded\n  paymentRef: varchar(\"payment_ref\", { length: 255 }),\n  bookingStatus: varchar(\"booking_status\", { length: 50 }).default(\"confirmed\"), // confirmed, in_progress, completed, cancelled\n  specialInstructions: text(\"special_instructions\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Routes table\nexport const routes = pgTable(\"routes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  operatorId: uuid(\"operator_id\").notNull().references(() => operators.id),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  assignedStaffId: uuid(\"assigned_staff_id\").references(() => fieldStaff.id),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"scheduled\"), // scheduled, in_progress, completed, cancelled\n  estimatedDuration: integer(\"estimated_duration\"), // minutes\n  actualDuration: integer(\"actual_duration\"), // minutes\n  totalDistance: real(\"total_distance\"), // kilometers\n  efficiency: real(\"efficiency\"), // percentage\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Route stops table\nexport const routeStops = pgTable(\"route_stops\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  routeId: uuid(\"route_id\").notNull().references(() => routes.id),\n  unitId: uuid(\"unit_id\").notNull().references(() => units.id),\n  stopOrder: integer(\"stop_order\").notNull(),\n  estimatedArrival: timestamp(\"estimated_arrival\"),\n  actualArrival: timestamp(\"actual_arrival\"),\n  serviceCompleted: boolean(\"service_completed\").default(false),\n  notes: text(\"notes\"),\n});\n\n// Maintenance logs table\nexport const maintenanceLogs = pgTable(\"maintenance_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  unitId: uuid(\"unit_id\").notNull().references(() => units.id),\n  staffId: uuid(\"staff_id\").references(() => fieldStaff.id),\n  maintenanceType: varchar(\"maintenance_type\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  scheduledDate: timestamp(\"scheduled_date\"),\n  completedDate: timestamp(\"completed_date\"),\n  status: varchar(\"status\", { length: 50 }).default(\"scheduled\"), // scheduled, in_progress, completed, cancelled\n  cost: decimal(\"cost\", { precision: 10, scale: 2 }),\n  partsUsed: jsonb(\"parts_used\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Transactions table\nexport const transactions = pgTable(\"transactions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  bookingId: uuid(\"booking_id\").references(() => bookings.id),\n  operatorId: uuid(\"operator_id\").notNull().references(() => operators.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: varchar(\"currency\", { length: 10 }).default(\"KES\"),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull(), // mpesa, card, cash\n  paymentRef: varchar(\"payment_ref\", { length: 255 }),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"),\n  platformFee: decimal(\"platform_fee\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const operatorsRelations = relations(operators, ({ many }) => ({\n  units: many(units),\n  fieldStaff: many(fieldStaff),\n  bookings: many(bookings),\n  routes: many(routes),\n  transactions: many(transactions),\n}));\n\nexport const unitsRelations = relations(units, ({ one, many }) => ({\n  operator: one(operators, {\n    fields: [units.operatorId],\n    references: [operators.id],\n  }),\n  telemetry: many(telemetry),\n  bookings: many(bookings),\n  routeStops: many(routeStops),\n  maintenanceLogs: many(maintenanceLogs),\n}));\n\nexport const telemetryRelations = relations(telemetry, ({ one }) => ({\n  unit: one(units, {\n    fields: [telemetry.unitId],\n    references: [units.id],\n  }),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  customer: one(customers, {\n    fields: [bookings.customerId],\n    references: [customers.id],\n  }),\n  operator: one(operators, {\n    fields: [bookings.operatorId],\n    references: [operators.id],\n  }),\n  unit: one(units, {\n    fields: [bookings.unitId],\n    references: [units.id],\n  }),\n}));\n\nexport const routesRelations = relations(routes, ({ one, many }) => ({\n  operator: one(operators, {\n    fields: [routes.operatorId],\n    references: [operators.id],\n  }),\n  assignedStaff: one(fieldStaff, {\n    fields: [routes.assignedStaffId],\n    references: [fieldStaff.id],\n  }),\n  stops: many(routeStops),\n}));\n\nexport const routeStopsRelations = relations(routeStops, ({ one }) => ({\n  route: one(routes, {\n    fields: [routeStops.routeId],\n    references: [routes.id],\n  }),\n  unit: one(units, {\n    fields: [routeStops.unitId],\n    references: [units.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertOperatorSchema = createInsertSchema(operators).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUnitSchema = createInsertSchema(units).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTelemetrySchema = createInsertSchema(telemetry).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRouteSchema = createInsertSchema(routes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMaintenanceLogSchema = createInsertSchema(maintenanceLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Operator = typeof operators.$inferSelect;\nexport type InsertOperator = z.infer<typeof insertOperatorSchema>;\nexport type Unit = typeof units.$inferSelect;\nexport type InsertUnit = z.infer<typeof insertUnitSchema>;\nexport type Telemetry = typeof telemetry.$inferSelect;\nexport type InsertTelemetry = z.infer<typeof insertTelemetrySchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Route = typeof routes.$inferSelect;\nexport type InsertRoute = z.infer<typeof insertRouteSchema>;\nexport type RouteStop = typeof routeStops.$inferSelect;\nexport type MaintenanceLog = typeof maintenanceLogs.$inferSelect;\nexport type InsertMaintenanceLog = z.infer<typeof insertMaintenanceLogSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type FieldStaff = typeof fieldStaff.$inferSelect;\n","size_bytes":11329},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Layout } from \"@/components/Layout\";\nimport Dashboard from \"@/pages/dashboard\";\nimport FleetMap from \"@/pages/fleet-map\";\nimport Routes from \"@/pages/routes\";\nimport Bookings from \"@/pages/bookings\";\nimport Analytics from \"@/pages/analytics\";\nimport Maintenance from \"@/pages/maintenance\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/fleet-map\" component={FleetMap} />\n        <Route path=\"/routes\" component={Routes} />\n        <Route path=\"/bookings\" component={Bookings} />\n        <Route path=\"/analytics\" component={Analytics} />\n        <Route path=\"/maintenance\" component={Maintenance} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1290},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(142.1, 76.2%, 36.3%);\n  --accent-foreground: hsl(355.7, 100%, 97.3%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(142.1, 76.2%, 36.3%);\n  --sidebar-accent-foreground: hsl(355.7, 100%, 97.3%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(142.1, 70.6%, 45.3%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --chart-1: hsl(217.2, 91.2%, 59.8%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217.2, 91.2%, 59.8%);\n  --sidebar-primary-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-accent: hsl(142.1, 70.6%, 45.3%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(224.3, 76.3%, 94.1%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4012},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CustomerBookingPortal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CreditCard, Smartphone } from \"lucide-react\";\n\nconst bookingSchema = z.object({\n  customerName: z.string().min(2, \"Name must be at least 2 characters\"),\n  customerPhone: z.string().min(10, \"Valid phone number required\"),\n  customerEmail: z.string().email().optional().or(z.literal(\"\")),\n  serviceType: z.string().min(1, \"Service type is required\"),\n  date: z.string().min(1, \"Date is required\"),\n  time: z.string().min(1, \"Time is required\"),\n  location: z.string().min(5, \"Location must be at least 5 characters\"),\n  mpesaNumber: z.string().min(10, \"Valid M-Pesa number required\"),\n});\n\ntype BookingFormData = z.infer<typeof bookingSchema>;\n\nconst serviceTypes = [\n  { value: \"standard\", label: \"Standard Cleaning\", price: 500 },\n  { value: \"deep\", label: \"Deep Sanitization\", price: 750 },\n  { value: \"event\", label: \"Event Package\", price: 1200 },\n  { value: \"construction\", label: \"Construction Site Package\", price: 800 },\n];\n\nconst timeSlots = [\n  \"8:00 AM\",\n  \"10:00 AM\",\n  \"12:00 PM\",\n  \"2:00 PM\",\n  \"4:00 PM\",\n];\n\nexport function CustomerBookingPortal() {\n  const [selectedService, setSelectedService] = useState<typeof serviceTypes[0] | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<BookingFormData>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerPhone: \"\",\n      customerEmail: \"\",\n      serviceType: \"\",\n      date: \"\",\n      time: \"\",\n      location: \"\",\n      mpesaNumber: \"\",\n    },\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: BookingFormData) => {\n      const service = serviceTypes.find(s => s.value === data.serviceType);\n      if (!service) throw new Error(\"Invalid service type\");\n\n      const bookingData = {\n        ...data,\n        operatorId: \"default-operator\", // In real app, this would be determined by location or selection\n        price: service.price,\n        startDate: new Date(`${data.date}T${convertTo24Hour(data.time)}`),\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/v1/bookings\", bookingData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Booking Created Successfully!\",\n        description: `Please complete payment of KSh ${selectedService?.price} via M-Pesa.`,\n      });\n      \n      // Simulate M-Pesa prompt\n      toast({\n        title: \"M-Pesa Payment Request Sent\",\n        description: \"Check your phone for the payment prompt.\",\n      });\n\n      form.reset();\n      setSelectedService(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/bookings\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const convertTo24Hour = (time12h: string) => {\n    const [time, modifier] = time12h.split(' ');\n    let [hours, minutes] = time.split(':');\n    if (hours === '12') {\n      hours = '00';\n    }\n    if (modifier === 'PM') {\n      hours = String(parseInt(hours, 10) + 12);\n    }\n    return `${hours}:${minutes}:00`;\n  };\n\n  const onSubmit = (data: BookingFormData) => {\n    bookingMutation.mutate(data);\n  };\n\n  const platformFee = 25;\n  const totalPrice = selectedService ? selectedService.price + platformFee : 0;\n\n  return (\n    <div className=\"bg-gradient-to-r from-primary to-blue-600 rounded-lg shadow-lg\" data-testid=\"customer-booking-portal\">\n      <div className=\"px-6 py-8 text-center\">\n        <h2 className=\"text-2xl font-bold text-primary-foreground mb-4\">\n          Customer Booking Portal\n        </h2>\n        <p className=\"text-primary-foreground/90 mb-6\">\n          Book mobile sanitation services instantly with M-Pesa payment\n        </p>\n        \n        <Card className=\"max-w-4xl mx-auto\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Booking Form */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Service Booking</h3>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"serviceType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Service Type</FormLabel>\n                          <Select \n                            onValueChange={(value) => {\n                              field.onChange(value);\n                              const service = serviceTypes.find(s => s.value === value);\n                              setSelectedService(service || null);\n                            }}\n                          >\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-service-type\">\n                                <SelectValue placeholder=\"Select service type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {serviceTypes.map((service) => (\n                                <SelectItem key={service.value} value={service.value}>\n                                  {service.label} - KSh {service.price}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"date\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Date</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" {...field} data-testid=\"input-date\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"time\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Time</FormLabel>\n                            <Select onValueChange={field.onChange}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-time\">\n                                  <SelectValue placeholder=\"Select time\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {timeSlots.map((time) => (\n                                  <SelectItem key={time} value={time}>\n                                    {time}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"location\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Location</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter address or landmark\" \n                              {...field} \n                              data-testid=\"input-location\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"customerName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Full Name</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter your full name\" \n                              {...field} \n                              data-testid=\"input-customer-name\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"customerPhone\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Contact Number</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"tel\" \n                              placeholder=\"+254 7XX XXX XXX\" \n                              {...field} \n                              data-testid=\"input-customer-phone\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"customerEmail\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email (Optional)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"email\" \n                              placeholder=\"your.email@example.com\" \n                              {...field} \n                              data-testid=\"input-customer-email\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </form>\n                </Form>\n              </div>\n\n              {/* Pricing and Payment */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-foreground mb-4\">Service Summary</h3>\n                <Card className=\"bg-muted mb-4\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">Service Fee</span>\n                      <span className=\"font-medium text-foreground\">\n                        KSh {selectedService?.price.toLocaleString() || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm text-muted-foreground\">Platform Fee</span>\n                      <span className=\"font-medium text-foreground\">KSh {platformFee}</span>\n                    </div>\n                    <Separator className=\"my-2\" />\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"font-semibold text-foreground\">Total</span>\n                      <span className=\"text-xl font-bold text-primary\" data-testid=\"text-total-price\">\n                        KSh {totalPrice.toLocaleString()}\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* M-Pesa Payment Section */}\n                <Card className=\"border mb-4\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center mb-3\">\n                      <div className=\"w-8 h-8 bg-green-600 rounded flex items-center justify-center mr-3\">\n                        <Smartphone className=\"h-4 w-4 text-white\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-foreground\">M-Pesa Payment</h4>\n                        <p className=\"text-xs text-muted-foreground\">Secure mobile money payment</p>\n                      </div>\n                    </div>\n                    <Form {...form}>\n                      <FormField\n                        control={form.control}\n                        name=\"mpesaNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormControl>\n                              <Input \n                                type=\"tel\" \n                                placeholder=\"Enter M-Pesa number\" \n                                {...field} \n                                data-testid=\"input-mpesa-number\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </Form>\n                  </CardContent>\n                </Card>\n\n                <Button\n                  onClick={form.handleSubmit(onSubmit)}\n                  disabled={bookingMutation.isPending || !selectedService}\n                  className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground font-medium py-3\"\n                  data-testid=\"button-book-and-pay\"\n                >\n                  <CreditCard className=\"mr-2 h-4 w-4\" />\n                  {bookingMutation.isPending ? \"Processing...\" : \"Book & Pay Now\"}\n                </Button>\n\n                <p className=\"text-xs text-muted-foreground mt-3 text-center\">\n                  You will receive an M-Pesa prompt to complete payment\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14963},"client/src/components/FleetMap.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin } from \"lucide-react\";\nimport { UnitWithTelemetry } from \"@/types\";\n\ninterface FleetMapProps {\n  units: UnitWithTelemetry[];\n  className?: string;\n}\n\nexport function FleetMap({ units, className }: FleetMapProps) {\n  const mapRef = useRef<HTMLDivElement>(null);\n\n  // Simulate map initialization\n  useEffect(() => {\n    if (mapRef.current) {\n      // In a real implementation, this would initialize Leaflet map\n      console.log('Initializing map with units:', units.length);\n    }\n  }, [units]);\n\n  const getStatusColor = (fillLevel: number) => {\n    if (fillLevel >= 85) return \"bg-destructive\";\n    if (fillLevel >= 60) return \"bg-amber-500\";\n    return \"bg-accent\";\n  };\n\n  const getStatusLabel = (fillLevel: number) => {\n    if (fillLevel >= 85) return \"Full\";\n    if (fillLevel >= 60) return \"Filling\";\n    return \"Available\";\n  };\n\n  return (\n    <Card className={className} data-testid=\"card-fleet-map\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-medium\">Fleet Overview</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              className=\"bg-accent text-accent-foreground\"\n              data-testid=\"button-all-units\"\n            >\n              All Units\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              data-testid=\"button-service-routes\"\n            >\n              Service Routes\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Map Container */}\n        <div \n          ref={mapRef}\n          className=\"h-96 bg-muted rounded-lg relative overflow-hidden border\"\n          data-testid=\"map-container\"\n        >\n          {/* Placeholder for interactive map */}\n          <div className=\"absolute inset-0 flex items-center justify-center text-muted-foreground\">\n            <div className=\"text-center\">\n              <MapPin className=\"h-16 w-16 mx-auto mb-4 text-primary\" />\n              <p className=\"text-lg font-medium\">Interactive Fleet Map</p>\n              <p className=\"text-sm\">Showing {units.length} active units</p>\n              <p className=\"text-xs mt-2 text-muted-foreground\">\n                Map integration with Leaflet will be initialized here\n              </p>\n            </div>\n          </div>\n          \n          {/* Map Legend */}\n          <div className=\"absolute top-4 right-4 bg-card border border-border rounded-lg p-3 shadow-lg\">\n            <div className=\"text-xs font-medium text-foreground mb-2\">Status Legend</div>\n            <div className=\"space-y-1\">\n              <div className=\"flex items-center\" data-testid=\"legend-available\">\n                <div className=\"w-3 h-3 bg-accent rounded-full mr-2\"></div>\n                <span className=\"text-xs text-muted-foreground\">Available (0-60%)</span>\n              </div>\n              <div className=\"flex items-center\" data-testid=\"legend-filling\">\n                <div className=\"w-3 h-3 bg-amber-500 rounded-full mr-2\"></div>\n                <span className=\"text-xs text-muted-foreground\">Filling (60-85%)</span>\n              </div>\n              <div className=\"flex items-center\" data-testid=\"legend-full\">\n                <div className=\"w-3 h-3 bg-destructive rounded-full mr-2\"></div>\n                <span className=\"text-xs text-muted-foreground\">Full (85%+)</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Unit Status Summary */}\n        <div className=\"mt-4 grid grid-cols-3 gap-4\">\n          {[\n            { label: \"Available\", color: \"bg-accent\", count: units.filter(u => (u.latestTelemetry?.fillLevelPct || 0) < 60).length },\n            { label: \"Filling\", color: \"bg-amber-500\", count: units.filter(u => (u.latestTelemetry?.fillLevelPct || 0) >= 60 && (u.latestTelemetry?.fillLevelPct || 0) < 85).length },\n            { label: \"Full\", color: \"bg-destructive\", count: units.filter(u => (u.latestTelemetry?.fillLevelPct || 0) >= 85).length },\n          ].map((status) => (\n            <div key={status.label} className=\"text-center\">\n              <div className={`w-4 h-4 ${status.color} rounded-full mx-auto mb-1`}></div>\n              <div className=\"text-sm font-medium\">{status.count}</div>\n              <div className=\"text-xs text-muted-foreground\">{status.label}</div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4755},"client/src/components/Layout.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"./Sidebar\";\nimport { TopNavbar } from \"./TopNavbar\";\nimport { MobileNav } from \"./MobileNav\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <MobileNav isOpen={isMobileMenuOpen} onClose={() => setIsMobileMenuOpen(false)} />\n      \n      <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\n        <TopNavbar onMobileMenuToggle={toggleMobileMenu} />\n        <main className=\"flex-1 overflow-y-auto\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":833},"client/src/components/MobileNav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  LayoutDashboard, \n  MapPin, \n  Route, \n  Calendar, \n  BarChart3, \n  Wrench, \n  Users, \n  Settings,\n  Building2,\n  X\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Fleet Map', href: '/fleet-map', icon: MapPin },\n  { name: 'Routes', href: '/routes', icon: Route },\n  { name: 'Bookings', href: '/bookings', icon: Calendar },\n  { name: 'Analytics', href: '/analytics', icon: BarChart3 },\n  { name: 'Maintenance', href: '/maintenance', icon: Wrench },\n  { name: 'Team', href: '/team', icon: Users },\n  { name: 'Settings', href: '/settings', icon: Settings },\n];\n\ninterface MobileNavProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function MobileNav({ isOpen, onClose }: MobileNavProps) {\n  const [location] = useLocation();\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 flex z-40 lg:hidden\" data-testid=\"mobile-nav-overlay\">\n      <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75\" onClick={onClose}></div>\n      <div className=\"relative flex-1 flex flex-col max-w-xs w-full bg-card\">\n        <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"ml-1 h-10 w-10 rounded-full text-white hover:text-gray-300\"\n            data-testid=\"button-close-mobile-nav\"\n          >\n            <X className=\"h-6 w-6\" />\n          </Button>\n        </div>\n        \n        <div className=\"flex-1 h-0 pt-5 pb-4 overflow-y-auto\">\n          <div className=\"flex-shrink-0 flex items-center px-4\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Building2 className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <span className=\"ml-3 text-xl font-semibold text-foreground\">SmartSan</span>\n          </div>\n          \n          <nav className=\"mt-5 px-2 space-y-1\">\n            {navigation.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  onClick={onClose}\n                  className={cn(\n                    isActive\n                      ? \"bg-accent text-accent-foreground\"\n                      : \"text-muted-foreground hover:bg-secondary\",\n                    \"group flex items-center px-2 py-2 text-base font-medium rounded-md\"\n                  )}\n                  data-testid={`mobile-nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <item.icon className=\"mr-4 flex-shrink-0 h-6 w-6\" />\n                  {item.name}\n                </Link>\n              );\n            })}\n          </nav>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2975},"client/src/components/PriorityAlerts.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert } from \"@/types\";\nimport { AlertTriangle, Wrench, WifiOff, Info } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface PriorityAlertsProps {\n  alerts: Alert[];\n}\n\nexport function PriorityAlerts({ alerts }: PriorityAlertsProps) {\n  const getAlertIcon = (type: Alert['type']) => {\n    switch (type) {\n      case 'urgent':\n        return AlertTriangle;\n      case 'maintenance':\n        return Wrench;\n      case 'offline':\n        return WifiOff;\n      default:\n        return Info;\n    }\n  };\n\n  const getAlertStyles = (type: Alert['type']) => {\n    switch (type) {\n      case 'urgent':\n        return {\n          container: \"bg-red-50 border-l-4 border-destructive\",\n          icon: \"text-destructive\",\n          title: \"text-destructive\",\n        };\n      case 'maintenance':\n        return {\n          container: \"bg-amber-50 border-l-4 border-amber-400\",\n          icon: \"text-amber-600\",\n          title: \"text-amber-800\",\n        };\n      case 'offline':\n        return {\n          container: \"bg-blue-50 border-l-4 border-primary\",\n          icon: \"text-primary\",\n          title: \"text-primary\",\n        };\n      default:\n        return {\n          container: \"bg-gray-50 border-l-4 border-gray-400\",\n          icon: \"text-gray-600\",\n          title: \"text-gray-800\",\n        };\n    }\n  };\n\n  if (alerts.length === 0) {\n    return (\n      <Card data-testid=\"card-priority-alerts\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-medium\">Priority Alerts</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <Info className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-muted-foreground\">No active alerts</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card data-testid=\"card-priority-alerts\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-medium\">Priority Alerts</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3\">\n          {alerts.map((alert) => {\n            const Icon = getAlertIcon(alert.type);\n            const styles = getAlertStyles(alert.type);\n            \n            return (\n              <div\n                key={alert.id}\n                className={`flex items-start space-x-3 p-3 rounded-md ${styles.container}`}\n                data-testid={`alert-${alert.type}-${alert.id}`}\n              >\n                <Icon className={`h-5 w-5 mt-0.5 ${styles.icon}`} />\n                <div className=\"flex-1\">\n                  <p className={`text-sm font-medium ${styles.title}`}>\n                    {alert.title}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {alert.location && `${alert.location} â€¢ `}\n                    {formatDistanceToNow(alert.timestamp, { addSuffix: true })}\n                  </p>\n                  {alert.description && (\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {alert.description}\n                    </p>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3347},"client/src/components/RecentBookings.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { BookingWithCustomer } from \"@/types\";\n\ninterface RecentBookingsProps {\n  bookings: BookingWithCustomer[];\n}\n\nexport function RecentBookings({ bookings }: RecentBookingsProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n      case 'completed':\n        return 'bg-accent text-accent-foreground';\n      case 'pending':\n        return 'bg-amber-100 text-amber-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPaymentStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(word => word[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <Card data-testid=\"card-recent-bookings\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-medium\">Recent Bookings</CardTitle>\n          <Link href=\"/bookings\">\n            <a className=\"text-sm text-primary hover:text-primary/80 font-medium\" data-testid=\"link-view-all-bookings\">\n              View all\n            </a>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {bookings.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No recent bookings</p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-border\">\n              <thead>\n                <tr>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Customer\n                  </th>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Location\n                  </th>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Amount\n                  </th>\n                  <th className=\"px-3 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-border\">\n                {bookings.map((booking) => (\n                  <tr key={booking.id} data-testid={`row-booking-${booking.id}`}>\n                    <td className=\"px-3 py-4 whitespace-nowrap text-sm text-foreground\">\n                      <div className=\"flex items-center\">\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarFallback className=\"text-xs\">\n                            {getInitials(booking.customer.name)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"ml-3\">\n                          <p className=\"font-medium\">{booking.customer.name}</p>\n                          <p className=\"text-muted-foreground text-xs\">{booking.customer.phone}</p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-3 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                      {booking.location}\n                    </td>\n                    <td className=\"px-3 py-4 whitespace-nowrap text-sm font-medium text-foreground\">\n                      KSh {booking.price.toLocaleString()}\n                    </td>\n                    <td className=\"px-3 py-4 whitespace-nowrap\">\n                      <div className=\"space-y-1\">\n                        <Badge className={getStatusColor(booking.bookingStatus)}>\n                          {booking.bookingStatus.charAt(0).toUpperCase() + booking.bookingStatus.slice(1)}\n                        </Badge>\n                        {booking.paymentStatus !== 'paid' && (\n                          <Badge className={getPaymentStatusColor(booking.paymentStatus)} variant=\"outline\">\n                            {booking.paymentStatus === 'pending' ? 'Payment Pending' : booking.paymentStatus}\n                          </Badge>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5000},"client/src/components/RoutePlanning.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Route, MapPin, Clock, TrendingUp } from \"lucide-react\";\n\ninterface RouteConfig {\n  startTime: string;\n  endTime: string;\n  maxDistance: string;\n  priorityFilters: {\n    highFill: boolean;\n    maintenanceDue: boolean;\n  };\n}\n\ninterface OptimizedRoute {\n  id: string;\n  name: string;\n  unitCount: number;\n  estimatedDuration: number;\n  distance: number;\n  efficiency: number;\n  areas: string[];\n}\n\nconst mockOptimizedRoutes: OptimizedRoute[] = [\n  {\n    id: \"1\",\n    name: \"Priority Route\",\n    unitCount: 8,\n    estimatedDuration: 210, // minutes\n    distance: 24.5,\n    efficiency: 94,\n    areas: [\"Westlands\", \"Kilimani\", \"Karen\"],\n  },\n  {\n    id: \"2\",\n    name: \"Standard Route\",\n    unitCount: 12,\n    estimatedDuration: 252,\n    distance: 31.2,\n    efficiency: 87,\n    areas: [\"CBD\", \"Eastlands\", \"Embakasi\"],\n  },\n];\n\nexport function RoutePlanning() {\n  const [optimizedRoutes, setOptimizedRoutes] = useState<OptimizedRoute[]>([]);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { register, handleSubmit, watch } = useForm<RouteConfig>({\n    defaultValues: {\n      startTime: \"08:00\",\n      endTime: \"17:00\",\n      maxDistance: \"50\",\n      priorityFilters: {\n        highFill: true,\n        maintenanceDue: true,\n      },\n    },\n  });\n\n  const generateRoutesMutation = useMutation({\n    mutationFn: async (config: RouteConfig) => {\n      const response = await apiRequest(\"POST\", \"/api/v1/routes/daily\", {\n        operatorId: \"default-operator\",\n        maxDistance: parseInt(config.maxDistance),\n        filters: config.priorityFilters,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      // For MVP, show mock optimized routes\n      setOptimizedRoutes(mockOptimizedRoutes);\n      toast({\n        title: \"Routes Generated Successfully\",\n        description: \"AI-optimized routes are ready for deployment.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/routes\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Route Generation Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onGenerateRoutes = async (config: RouteConfig) => {\n    setIsGenerating(true);\n    try {\n      await generateRoutesMutation.mutateAsync(config);\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const formatDuration = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}.${mins < 30 ? 0 : 5} hours`;\n  };\n\n  return (\n    <Card data-testid=\"card-route-planning\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-lg font-medium\">Route Planning</CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              AI-optimized service routes for maximum efficiency\n            </p>\n          </div>\n          <Button\n            onClick={handleSubmit(onGenerateRoutes)}\n            disabled={isGenerating}\n            className=\"bg-primary hover:bg-primary/90\"\n            data-testid=\"button-generate-routes\"\n          >\n            <Route className=\"mr-2 h-4 w-4\" />\n            {isGenerating ? \"Generating...\" : \"Generate New Routes\"}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Route Configuration */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-4\">Route Configuration</h4>\n            <form className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"startTime\" className=\"text-sm font-medium\">\n                    Start Time\n                  </Label>\n                  <Input\n                    id=\"startTime\"\n                    type=\"time\"\n                    {...register(\"startTime\")}\n                    data-testid=\"input-start-time\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"endTime\" className=\"text-sm font-medium\">\n                    End Time\n                  </Label>\n                  <Input\n                    id=\"endTime\"\n                    type=\"time\"\n                    {...register(\"endTime\")}\n                    data-testid=\"input-end-time\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium mb-2 block\">Priority Filters</Label>\n                <div className=\"flex space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"highFill\"\n                      {...register(\"priorityFilters.highFill\")}\n                      data-testid=\"checkbox-high-fill\"\n                    />\n                    <Label htmlFor=\"highFill\" className=\"text-sm\">\n                      High Fill (&gt;80%)\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"maintenanceDue\"\n                      {...register(\"priorityFilters.maintenanceDue\")}\n                      data-testid=\"checkbox-maintenance-due\"\n                    />\n                    <Label htmlFor=\"maintenanceDue\" className=\"text-sm\">\n                      Maintenance Due\n                    </Label>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"maxDistance\" className=\"text-sm font-medium\">\n                  Maximum Distance\n                </Label>\n                <Select defaultValue=\"50\">\n                  <SelectTrigger data-testid=\"select-max-distance\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"50\">50 km radius</SelectItem>\n                    <SelectItem value=\"75\">75 km radius</SelectItem>\n                    <SelectItem value=\"100\">100 km radius</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </form>\n          </div>\n\n          {/* Generated Routes Preview */}\n          <div>\n            <h4 className=\"font-medium text-foreground mb-4\">Optimized Routes</h4>\n            {optimizedRoutes.length === 0 ? (\n              <div className=\"text-center py-8 border border-dashed border-border rounded-lg\">\n                <Route className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-muted-foreground\">\n                  Generate routes to see optimization results\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {optimizedRoutes.map((route, index) => (\n                  <Card\n                    key={route.id}\n                    className=\"border border-border p-4\"\n                    data-testid={`route-preview-${route.id}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-bold\">\n                          {index + 1}\n                        </div>\n                        <span className=\"ml-2 font-medium text-foreground\">\n                          {route.name}\n                        </span>\n                      </div>\n                      <span className=\"text-xs text-muted-foreground\">\n                        Est. {formatDuration(route.estimatedDuration)}\n                      </span>\n                    </div>\n                    \n                    <div className=\"text-sm text-muted-foreground mb-2\">\n                      <MapPin className=\"inline h-3 w-3 mr-1\" />\n                      {route.unitCount} units â€¢ {route.areas.join(\" â†’ \")}\n                    </div>\n                    \n                    <div className=\"flex justify-between text-xs\">\n                      <span className=\"text-muted-foreground\">\n                        Distance: {route.distance} km\n                      </span>\n                      <Badge className=\"bg-accent text-accent-foreground\">\n                        <TrendingUp className=\"h-3 w-3 mr-1\" />\n                        Efficiency: {route.efficiency}%\n                      </Badge>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9436},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  LayoutDashboard, \n  MapPin, \n  Route, \n  Calendar, \n  BarChart3, \n  Wrench, \n  Users, \n  Settings,\n  Building2\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: 'Dashboard', href: '/', icon: LayoutDashboard },\n  { name: 'Fleet Map', href: '/fleet-map', icon: MapPin },\n  { name: 'Routes', href: '/routes', icon: Route },\n  { name: 'Bookings', href: '/bookings', icon: Calendar },\n  { name: 'Analytics', href: '/analytics', icon: BarChart3 },\n  { name: 'Maintenance', href: '/maintenance', icon: Wrench },\n  { name: 'Team', href: '/team', icon: Users },\n  { name: 'Settings', href: '/settings', icon: Settings },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"hidden lg:flex lg:w-64 lg:flex-col\">\n      <div className=\"flex flex-col flex-grow bg-card border-r border-border pt-5 pb-4 overflow-y-auto\">\n        <div className=\"flex items-center flex-shrink-0 px-4\">\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Building2 className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <span className=\"ml-3 text-xl font-semibold text-foreground\">SmartSan</span>\n          </div>\n        </div>\n        <nav className=\"mt-8 flex-1 px-2 space-y-1\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <Link\n                key={item.name}\n                href={item.href}\n                className={cn(\n                  isActive\n                    ? \"bg-accent text-accent-foreground\"\n                    : \"text-muted-foreground hover:bg-secondary\",\n                  \"group flex items-center px-2 py-2 text-sm font-medium rounded-md\"\n                )}\n              >\n                <item.icon className=\"mr-3 flex-shrink-0 h-4 w-4\" />\n                {item.name}\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2108},"client/src/components/StatsOverview.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Building2, AlertCircle, TrendingUp, Users } from \"lucide-react\";\nimport { FleetStats, RevenueStats } from \"@/types\";\n\ninterface StatsOverviewProps {\n  fleetStats: FleetStats;\n  revenueStats: RevenueStats;\n  isLoading?: boolean;\n}\n\nexport function StatsOverview({ fleetStats, revenueStats, isLoading }: StatsOverviewProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-5\">\n              <div className=\"h-6 bg-muted rounded mb-2\"></div>\n              <div className=\"h-8 bg-muted rounded mb-3\"></div>\n              <div className=\"h-4 bg-muted rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const stats = [\n    {\n      name: \"Active Units\",\n      value: fleetStats.activeUnits,\n      icon: Building2,\n      color: \"text-primary\",\n      change: \"+2.1%\",\n      changeLabel: \"from yesterday\",\n      positive: true,\n    },\n    {\n      name: \"Needs Service\",\n      value: fleetStats.unitsNeedingService,\n      icon: AlertCircle,\n      color: \"text-amber-500\",\n      change: `${Math.max(0, fleetStats.unitsNeedingService - 5)} urgent`,\n      changeLabel: \"require attention\",\n      positive: false,\n    },\n    {\n      name: \"Today's Revenue\",\n      value: `KSh ${revenueStats.totalRevenue.toLocaleString()}`,\n      icon: TrendingUp,\n      color: \"text-accent\",\n      change: \"+12.3%\",\n      changeLabel: \"vs last week\",\n      positive: true,\n    },\n    {\n      name: \"Active Bookings\",\n      value: revenueStats.transactionCount,\n      icon: Users,\n      color: \"text-blue-500\",\n      change: \"14 pending\",\n      changeLabel: \"payment\",\n      positive: true,\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4\">\n      {stats.map((stat) => (\n        <Card key={stat.name} className=\"overflow-hidden shadow border border-border\" data-testid={`card-stat-${stat.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n          <CardContent className=\"p-5\">\n            <div className=\"flex items-center\">\n              <div className=\"flex-shrink-0\">\n                <stat.icon className={`h-6 w-6 ${stat.color}`} />\n              </div>\n              <div className=\"ml-5 w-0 flex-1\">\n                <dl>\n                  <dt className=\"text-sm font-medium text-muted-foreground truncate\">\n                    {stat.name}\n                  </dt>\n                  <dd className=\"text-lg font-medium text-foreground\" data-testid={`text-${stat.name.toLowerCase().replace(/\\s+/g, '-')}-value`}>\n                    {stat.value}\n                  </dd>\n                </dl>\n              </div>\n            </div>\n          </CardContent>\n          <div className=\"bg-muted px-5 py-3\">\n            <div className=\"text-sm\">\n              <Badge \n                variant={stat.positive ? \"default\" : \"destructive\"}\n                className={stat.positive ? \"bg-accent text-accent-foreground\" : \"\"}\n              >\n                {stat.change}\n              </Badge>\n              <span className=\"text-muted-foreground ml-2\">{stat.changeLabel}</span>\n            </div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3416},"client/src/components/TodaysRoutes.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { RouteWithStops } from \"@/types\";\n\ninterface TodaysRoutesProps {\n  routes: RouteWithStops[];\n  onOptimizeAll?: () => void;\n}\n\nexport function TodaysRoutes({ routes, onOptimizeAll }: TodaysRoutesProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'in_progress':\n        return 'bg-accent text-accent-foreground';\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'scheduled':\n        return 'bg-secondary text-secondary-foreground';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case 'in_progress':\n        return 'In Progress';\n      case 'completed':\n        return 'Completed';\n      case 'scheduled':\n        return 'Scheduled';\n      default:\n        return status;\n    }\n  };\n\n  const calculateProgress = (route: RouteWithStops) => {\n    if (route.stops.length === 0) return 0;\n    const completedStops = route.stops.filter(stop => stop.serviceCompleted).length;\n    return (completedStops / route.stops.length) * 100;\n  };\n\n  return (\n    <Card data-testid=\"card-todays-routes\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-medium\">Today's Routes</CardTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"text-primary hover:text-primary/80\"\n            onClick={onOptimizeAll}\n            data-testid=\"button-optimize-all\"\n          >\n            Optimize All\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {routes.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No routes scheduled for today</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {routes.map((route, index) => {\n              const progress = calculateProgress(route);\n              const completedStops = route.stops.filter(stop => stop.serviceCompleted).length;\n              \n              return (\n                <div\n                  key={route.id}\n                  className=\"border border-border rounded-lg p-4\"\n                  data-testid={`route-${route.id}`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-sm font-medium\">\n                        R{index + 1}\n                      </div>\n                      <div className=\"ml-3\">\n                        <p className=\"text-sm font-medium text-foreground\">\n                          {route.name}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Driver: {route.assignedStaffId ? `Staff ${route.assignedStaffId.slice(0, 8)}` : 'Unassigned'}\n                        </p>\n                      </div>\n                    </div>\n                    <Badge className={getStatusColor(route.status)}>\n                      {getStatusLabel(route.status)}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 text-sm mb-3\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Units:</span>\n                      <span className=\"ml-1 font-medium\">{route.stops.length}</span>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Duration:</span>\n                      <span className=\"ml-1 font-medium\">\n                        {route.estimatedDuration ? `${Math.round(route.estimatedDuration / 60)}h ${route.estimatedDuration % 60}m` : 'TBD'}\n                      </span>\n                    </div>\n                  </div>\n\n                  {route.status === 'in_progress' && (\n                    <div>\n                      <Progress value={progress} className=\"w-full h-2 mb-1\" />\n                      <p className=\"text-xs text-muted-foreground\">\n                        {completedStops} of {route.stops.length} units completed\n                      </p>\n                    </div>\n                  )}\n                  \n                  {route.efficiency && (\n                    <div className=\"mt-2 text-xs\">\n                      <span className=\"text-muted-foreground\">Efficiency:</span>\n                      <span className=\"ml-1 font-medium text-accent\">{route.efficiency}%</span>\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5047},"client/src/components/TopNavbar.tsx":{"content":"import { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Search, Bell, Menu, ChevronDown, User, Settings, LogOut } from \"lucide-react\";\n\ninterface TopNavbarProps {\n  onMobileMenuToggle?: () => void;\n}\n\nexport function TopNavbar({ onMobileMenuToggle }: TopNavbarProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [notificationCount] = useState(3);\n\n  return (\n    <div className=\"relative z-10 flex-shrink-0 flex h-16 bg-card border-b border-border shadow-sm\">\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"border-r border-border lg:hidden\"\n        onClick={onMobileMenuToggle}\n        data-testid=\"button-mobile-menu\"\n      >\n        <Menu className=\"h-6 w-6\" />\n      </Button>\n      \n      <div className=\"flex-1 px-4 flex justify-between items-center\">\n        <div className=\"flex-1 flex\">\n          <div className=\"w-full flex md:ml-0\">\n            <div className=\"relative w-full max-w-lg\">\n              <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\n                <Search className=\"h-5 w-5 text-muted-foreground ml-3\" />\n              </div>\n              <Input\n                type=\"search\"\n                placeholder=\"Search units, routes, bookings...\"\n                className=\"pl-10 w-full\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"ml-4 flex items-center md:ml-6 space-x-4\">\n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n            <Bell className=\"h-6 w-6\" />\n            {notificationCount > 0 && (\n              <Badge className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\">\n                {notificationCount}\n              </Badge>\n            )}\n          </Button>\n          \n          {/* Profile dropdown */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-profile\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarImage src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\" alt=\"User avatar\" />\n                  <AvatarFallback>JM</AvatarFallback>\n                </Avatar>\n                <span className=\"text-foreground font-medium hidden md:block\">James Mwangi</span>\n                <ChevronDown className=\"h-4 w-4 text-muted-foreground\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <DropdownMenuItem data-testid=\"menu-profile\">\n                <User className=\"mr-2 h-4 w-4\" />\n                Profile\n              </DropdownMenuItem>\n              <DropdownMenuItem data-testid=\"menu-settings\">\n                <Settings className=\"mr-2 h-4 w-4\" />\n                Settings\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem data-testid=\"menu-logout\">\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                Log out\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3892},"client/src/components/UnitStatusTable.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { CalendarPlus, Info, MapPin } from \"lucide-react\";\nimport { UnitWithTelemetry } from \"@/types\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface UnitStatusTableProps {\n  units: UnitWithTelemetry[];\n  onScheduleService?: (unitId: string) => void;\n  onViewDetails?: (unitId: string) => void;\n}\n\nexport function UnitStatusTable({ units, onScheduleService, onViewDetails }: UnitStatusTableProps) {\n  const [locationFilter, setLocationFilter] = useState<string>(\"all\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n\n  const getStatusColor = (fillLevel: number, unitStatus: string) => {\n    if (unitStatus === 'offline') {\n      return {\n        color: \"bg-gray-100 text-gray-800\",\n        icon: \"wifi-slash\",\n        label: \"Offline\",\n      };\n    }\n\n    if (fillLevel >= 85) {\n      return {\n        color: \"bg-red-100 text-red-800\",\n        icon: \"exclamation-circle\",\n        label: \"Urgent\",\n      };\n    }\n\n    if (fillLevel >= 60) {\n      return {\n        color: \"bg-amber-100 text-amber-800\",\n        icon: \"exclamation-triangle\",\n        label: \"Needs Service\",\n      };\n    }\n\n    return {\n      color: \"bg-green-100 text-green-800\",\n      icon: \"check-circle\",\n      label: \"Good\",\n    };\n  };\n\n  const getFillLevelColor = (fillLevel: number) => {\n    if (fillLevel >= 85) return \"bg-destructive\";\n    if (fillLevel >= 60) return \"bg-amber-500\";\n    return \"bg-accent\";\n  };\n\n  // Get unique locations for filter\n  const locations = Array.from(new Set(units.map(unit => unit.location).filter(Boolean)));\n\n  // Filter units\n  const filteredUnits = units.filter(unit => {\n    const locationMatch = locationFilter === \"all\" || unit.location === locationFilter;\n    const statusMatch = statusFilter === \"all\" || \n      (statusFilter === \"needs_service\" && (unit.latestTelemetry?.fillLevelPct || 0) >= 60) ||\n      (statusFilter === \"good\" && (unit.latestTelemetry?.fillLevelPct || 0) < 60) ||\n      (statusFilter === \"offline\" && unit.status === 'offline');\n    \n    return locationMatch && statusMatch;\n  });\n\n  return (\n    <Card data-testid=\"card-unit-status-table\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-medium\">Unit Status Overview</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Select value={locationFilter} onValueChange={setLocationFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-location-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Locations</SelectItem>\n                {locations.map((location) => (\n                  <SelectItem key={location} value={location}>\n                    {location}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"good\">Good</SelectItem>\n                <SelectItem value=\"needs_service\">Needs Service</SelectItem>\n                <SelectItem value=\"offline\">Offline</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {filteredUnits.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No units match the selected filters</p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-border\">\n              <thead>\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Unit ID\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Location\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Fill Level\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Last Update\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-border\">\n                {filteredUnits.map((unit) => {\n                  const fillLevel = unit.latestTelemetry?.fillLevelPct || 0;\n                  const lastUpdate = unit.latestTelemetry?.timestamp || unit.lastSeenAt;\n                  const status = getStatusColor(fillLevel, unit.status);\n                  \n                  return (\n                    <tr\n                      key={unit.id}\n                      className=\"hover:bg-muted\"\n                      data-testid={`row-unit-${unit.serialNo}`}\n                    >\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-foreground\">\n                        {unit.serialNo}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-3 w-3 mr-1\" />\n                          {unit.location || \"Unknown\"}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-full bg-muted rounded-full h-2 mr-3 max-w-20\">\n                            <div\n                              className={`h-2 rounded-full ${getFillLevelColor(fillLevel)}`}\n                              style={{ width: `${fillLevel}%` }}\n                            />\n                          </div>\n                          <span className={`font-medium ${fillLevel >= 85 ? 'text-destructive' : fillLevel >= 60 ? 'text-amber-600' : 'text-accent'}`}>\n                            {fillLevel.toFixed(0)}%\n                          </span>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm text-muted-foreground\">\n                        {lastUpdate \n                          ? formatDistanceToNow(new Date(lastUpdate), { addSuffix: true })\n                          : \"Never\"\n                        }\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <Badge className={status.color}>\n                          {status.label}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => onScheduleService?.(unit.id)}\n                            className=\"text-primary hover:text-primary/80\"\n                            data-testid={`button-schedule-service-${unit.serialNo}`}\n                          >\n                            <CalendarPlus className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => onViewDetails?.(unit.id)}\n                            className=\"text-muted-foreground hover:text-foreground\"\n                            data-testid={`button-view-details-${unit.serialNo}`}\n                          >\n                            <Info className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9115},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { WebSocketMessage } from '@/types';\n\nexport function useWebSocket(onMessage?: (message: WebSocketMessage) => void) {\n  const [isConnected, setIsConnected] = useState(false);\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  const connect = () => {\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      ws.current = new WebSocket(wsUrl);\n\n      ws.current.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n      };\n\n      ws.current.onclose = () => {\n        console.log('WebSocket disconnected');\n        setIsConnected(false);\n        \n        // Attempt to reconnect after 3 seconds\n        reconnectTimeoutRef.current = setTimeout(() => {\n          console.log('Attempting to reconnect...');\n          connect();\n        }, 3000);\n      };\n\n      ws.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n\n      ws.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          onMessage?.(message);\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n    }\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    sendMessage,\n  };\n}\n","size_bytes":1960},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, TrendingDown, DollarSign, Users, Truck, Calendar, Download } from \"lucide-react\";\nimport type { FleetStats, RevenueStats } from \"@/types\";\n\nexport default function AnalyticsPage() {\n  const { data: fleetStats, isLoading: fleetLoading } = useQuery<FleetStats>({\n    queryKey: [\"/api/v1/analytics/fleet-stats\"],\n  });\n\n  const { data: revenueStats, isLoading: revenueLoading } = useQuery<RevenueStats>({\n    queryKey: [\"/api/v1/analytics/revenue\"],\n  });\n\n  // Mock data for analytics charts\n  const weeklyRevenue = [\n    { day: 'Mon', revenue: 18500 },\n    { day: 'Tue', revenue: 22100 },\n    { day: 'Wed', revenue: 19800 },\n    { day: 'Thu', revenue: 24350 },\n    { day: 'Fri', revenue: 21700 },\n    { day: 'Sat', revenue: 28900 },\n    { day: 'Sun', revenue: 26200 },\n  ];\n\n  const utilizationData = [\n    { area: 'Westlands', utilization: 85, units: 25 },\n    { area: 'Kilimani', utilization: 78, units: 18 },\n    { area: 'Karen', utilization: 92, units: 22 },\n    { area: 'CBD', utilization: 67, units: 15 },\n    { area: 'Eastlands', utilization: 73, units: 20 },\n  ];\n\n  if (fleetLoading || revenueLoading) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-32 bg-muted rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Page header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-6\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-foreground sm:text-3xl sm:truncate\">\n              Analytics Dashboard\n            </h2>\n            <p className=\"mt-1 text-sm text-muted-foreground\">\n              Comprehensive insights into fleet performance and business metrics\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4 space-x-3\">\n            <Select defaultValue=\"7days\">\n              <SelectTrigger className=\"w-40\" data-testid=\"select-time-period\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                <SelectItem value=\"90days\">Last 90 days</SelectItem>\n                <SelectItem value=\"1year\">Last year</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"outline\" data-testid=\"button-export-analytics\">\n              <Download className=\"-ml-1 mr-2 h-4 w-4\" />\n              Export Report\n            </Button>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card data-testid=\"card-total-revenue\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <DollarSign className=\"h-6 w-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Revenue</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    KSh {revenueStats?.totalRevenue.toLocaleString() || 0}\n                  </p>\n                  <div className=\"flex items-center text-sm\">\n                    <TrendingUp className=\"h-3 w-3 text-green-600 mr-1\" />\n                    <span className=\"text-green-600 font-medium\">+12.5%</span>\n                    <span className=\"text-muted-foreground ml-1\">vs last week</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-active-units\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <Truck className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Units</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {fleetStats?.activeUnits || 0}\n                  </p>\n                  <div className=\"flex items-center text-sm\">\n                    <span className=\"text-muted-foreground\">\n                      {((fleetStats?.activeUnits || 0) / (fleetStats?.totalUnits || 1) * 100).toFixed(1)}% operational\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-avg-utilization\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <TrendingUp className=\"h-6 w-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Avg Utilization</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {fleetStats?.averageUtilization.toFixed(1) || 0}%\n                  </p>\n                  <div className=\"flex items-center text-sm\">\n                    <TrendingUp className=\"h-3 w-3 text-green-600 mr-1\" />\n                    <span className=\"text-green-600 font-medium\">+3.2%</span>\n                    <span className=\"text-muted-foreground ml-1\">vs last month</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"card-total-bookings\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"flex-shrink-0\">\n                  <Calendar className=\"h-6 w-6 text-orange-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Bookings</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {revenueStats?.transactionCount || 0}\n                  </p>\n                  <div className=\"flex items-center text-sm\">\n                    <span className=\"text-muted-foreground\">\n                      KSh {revenueStats?.averageBookingValue.toFixed(0) || 0} avg value\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"utilization\" data-testid=\"tab-utilization\">Utilization</TabsTrigger>\n            <TabsTrigger value=\"revenue\" data-testid=\"tab-revenue\">Revenue</TabsTrigger>\n            <TabsTrigger value=\"performance\" data-testid=\"tab-performance\">Performance</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Revenue Chart */}\n              <Card data-testid=\"card-revenue-chart\">\n                <CardHeader>\n                  <CardTitle>Weekly Revenue Trend</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-64 flex items-end justify-between space-x-2\">\n                    {weeklyRevenue.map((day) => (\n                      <div key={day.day} className=\"flex flex-col items-center\">\n                        <div\n                          className=\"w-8 bg-primary rounded-t\"\n                          style={{\n                            height: `${(day.revenue / Math.max(...weeklyRevenue.map(d => d.revenue))) * 200}px`,\n                          }}\n                        ></div>\n                        <span className=\"text-xs text-muted-foreground mt-2\">{day.day}</span>\n                        <span className=\"text-xs font-medium\">\n                          {(day.revenue / 1000).toFixed(0)}k\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Fleet Health */}\n              <Card data-testid=\"card-fleet-health\">\n                <CardHeader>\n                  <CardTitle>Fleet Health Overview</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Units Operational</span>\n                      <span className=\"font-medium\">\n                        {fleetStats?.activeUnits}/{fleetStats?.totalUnits}\n                      </span>\n                    </div>\n                    <Progress \n                      value={((fleetStats?.activeUnits || 0) / (fleetStats?.totalUnits || 1)) * 100} \n                      className=\"h-2\"\n                    />\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Service Required</span>\n                      <span className=\"font-medium text-destructive\">\n                        {fleetStats?.unitsNeedingService}\n                      </span>\n                    </div>\n                    <Progress \n                      value={((fleetStats?.unitsNeedingService || 0) / (fleetStats?.totalUnits || 1)) * 100} \n                      className=\"h-2\"\n                    />\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-2\">\n                      <span>Average Fill Level</span>\n                      <span className=\"font-medium\">\n                        {fleetStats?.averageUtilization.toFixed(1)}%\n                      </span>\n                    </div>\n                    <Progress \n                      value={fleetStats?.averageUtilization || 0} \n                      className=\"h-2\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"utilization\" className=\"space-y-6\">\n            <Card data-testid=\"card-area-utilization\">\n              <CardHeader>\n                <CardTitle>Utilization by Area</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {utilizationData.map((area) => (\n                    <div\n                      key={area.area}\n                      className=\"flex items-center justify-between p-4 border border-border rounded-lg\"\n                      data-testid={`area-utilization-${area.area.toLowerCase()}`}\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <p className=\"font-medium text-foreground\">{area.area}</p>\n                          <p className=\"text-sm text-muted-foreground\">{area.units} units</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-32\">\n                          <Progress value={area.utilization} className=\"h-2\" />\n                        </div>\n                        <span className=\"font-medium text-foreground w-12 text-right\">\n                          {area.utilization}%\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"revenue\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card data-testid=\"card-revenue-breakdown\">\n                <CardHeader>\n                  <CardTitle>Revenue Breakdown</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Service Fees</span>\n                    <span className=\"font-medium\">KSh {((revenueStats?.totalRevenue || 0) * 0.95).toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-muted-foreground\">Platform Fees</span>\n                    <span className=\"font-medium\">KSh {((revenueStats?.totalRevenue || 0) * 0.05).toLocaleString()}</span>\n                  </div>\n                  <div className=\"border-t pt-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"font-medium\">Total</span>\n                      <span className=\"text-lg font-bold text-primary\">\n                        KSh {revenueStats?.totalRevenue.toLocaleString() || 0}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-payment-methods\">\n                <CardHeader>\n                  <CardTitle>Payment Methods</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">M-Pesa</span>\n                    <Badge className=\"bg-green-100 text-green-800\">92%</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Card Payment</span>\n                    <Badge variant=\"outline\">6%</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Cash</span>\n                    <Badge variant=\"outline\">2%</Badge>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-growth-metrics\">\n                <CardHeader>\n                  <CardTitle>Growth Metrics</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-sm text-muted-foreground\">Monthly Growth</span>\n                      <div className=\"flex items-center\">\n                        <TrendingUp className=\"h-3 w-3 text-green-600 mr-1\" />\n                        <span className=\"text-green-600 font-medium\">+15.2%</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-sm text-muted-foreground\">Customer Retention</span>\n                      <span className=\"font-medium\">87%</span>\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-sm text-muted-foreground\">Avg Booking Value</span>\n                      <span className=\"font-medium\">\n                        KSh {revenueStats?.averageBookingValue.toFixed(0) || 0}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"performance\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card data-testid=\"card-efficiency-metrics\">\n                <CardHeader>\n                  <CardTitle>Operational Efficiency</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium\">Route Efficiency</span>\n                      <span className=\"font-bold text-foreground\">89%</span>\n                    </div>\n                    <Progress value={89} className=\"h-2\" />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Average optimization vs manual planning\n                    </p>\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium\">Service Response Time</span>\n                      <span className=\"font-bold text-foreground\">18 min</span>\n                    </div>\n                    <Progress value={75} className=\"h-2\" />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Target: 15 minutes\n                    </p>\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium\">Maintenance Compliance</span>\n                      <span className=\"font-bold text-foreground\">94%</span>\n                    </div>\n                    <Progress value={94} className=\"h-2\" />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Units serviced on schedule\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-cost-analysis\">\n                <CardHeader>\n                  <CardTitle>Cost Analysis</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-foreground\">KSh 12.50</div>\n                      <div className=\"text-xs text-muted-foreground\">Cost per service</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-foreground\">KSh 450</div>\n                      <div className=\"text-xs text-muted-foreground\">Daily operational cost</div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Fuel & Transport</span>\n                      <span className=\"font-medium\">45%</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Labor</span>\n                      <span className=\"font-medium\">35%</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Maintenance</span>\n                      <span className=\"font-medium\">15%</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Other</span>\n                      <span className=\"font-medium\">5%</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20629},"client/src/pages/bookings.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Filter, Download, Calendar, MapPin, Phone } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { BookingWithCustomer } from \"@/types\";\n\nexport default function BookingsPage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const { data: bookings = [], isLoading } = useQuery<BookingWithCustomer[]>({\n    queryKey: [\"/api/v1/bookings\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return 'bg-blue-100 text-blue-800';\n      case 'in_progress':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPaymentStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid':\n        return 'bg-green-100 text-green-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(word => word[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const filteredBookings = bookings.filter(booking => {\n    const matchesSearch = searchQuery === \"\" || \n      booking.customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      booking.location.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      booking.customer.phone.includes(searchQuery);\n    \n    const matchesStatus = statusFilter === \"all\" || booking.bookingStatus === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const pendingBookings = filteredBookings.filter(b => b.bookingStatus === 'confirmed');\n  const activeBookings = filteredBookings.filter(b => b.bookingStatus === 'in_progress');\n  const completedBookings = filteredBookings.filter(b => b.bookingStatus === 'completed');\n\n  const BookingCard = ({ booking }: { booking: BookingWithCustomer }) => (\n    <Card key={booking.id} data-testid={`card-booking-${booking.id}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex items-start space-x-3\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarFallback>{getInitials(booking.customer.name)}</AvatarFallback>\n            </Avatar>\n            <div>\n              <h3 className=\"font-medium text-foreground\">{booking.customer.name}</h3>\n              <div className=\"flex items-center text-sm text-muted-foreground mt-1\">\n                <Phone className=\"h-3 w-3 mr-1\" />\n                {booking.customer.phone}\n              </div>\n              <div className=\"flex items-center text-sm text-muted-foreground mt-1\">\n                <MapPin className=\"h-3 w-3 mr-1\" />\n                {booking.location}\n              </div>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-lg font-bold text-foreground\">KSh {booking.price.toLocaleString()}</p>\n            <p className=\"text-xs text-muted-foreground\">\n              {formatDistanceToNow(new Date(booking.startDate), { addSuffix: true })}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex space-x-2\">\n            <Badge className={getStatusColor(booking.bookingStatus)}>\n              {booking.bookingStatus.replace('_', ' ')}\n            </Badge>\n            <Badge variant=\"outline\" className={getPaymentStatusColor(booking.paymentStatus)}>\n              {booking.paymentStatus}\n            </Badge>\n          </div>\n          <div className=\"text-sm text-muted-foreground\">\n            {booking.serviceType}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Page header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-6\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-foreground sm:text-3xl sm:truncate\">\n              Bookings Management\n            </h2>\n            <p className=\"mt-1 text-sm text-muted-foreground\">\n              Track and manage customer service bookings\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4 space-x-3\">\n            <Button variant=\"outline\" data-testid=\"button-export-bookings\">\n              <Download className=\"-ml-1 mr-2 h-4 w-4\" />\n              Export\n            </Button>\n            <Button data-testid=\"button-new-booking\">\n              <Calendar className=\"-ml-1 mr-2 h-4 w-4\" />\n              New Booking\n            </Button>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search bookings, customers, locations...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-bookings\"\n                  />\n                </div>\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-booking-status-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-foreground\">{pendingBookings.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Pending</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-foreground\">{activeBookings.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Active</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-foreground\">{completedBookings.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Completed</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-foreground\">\n                KSh {filteredBookings.reduce((sum, b) => sum + b.price, 0).toLocaleString()}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Value</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"all\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"all\" data-testid=\"tab-all-bookings\">All Bookings</TabsTrigger>\n            <TabsTrigger value=\"pending\" data-testid=\"tab-pending-bookings\">Pending</TabsTrigger>\n            <TabsTrigger value=\"active\" data-testid=\"tab-active-bookings\">Active</TabsTrigger>\n            <TabsTrigger value=\"completed\" data-testid=\"tab-completed-bookings\">Completed</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"all\">\n            <div className=\"space-y-4\">\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <Card key={i}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"animate-pulse space-y-3\">\n                          <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/4\"></div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : filteredBookings.length === 0 ? (\n                <Card>\n                  <CardContent className=\"py-12 text-center\">\n                    <Calendar className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-foreground mb-2\">No Bookings Found</h3>\n                    <p className=\"text-muted-foreground\">\n                      No bookings match your current filters\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : (\n                filteredBookings.map((booking) => <BookingCard key={booking.id} booking={booking} />)\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"pending\">\n            <div className=\"space-y-4\">\n              {pendingBookings.map((booking) => <BookingCard key={booking.id} booking={booking} />)}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"active\">\n            <div className=\"space-y-4\">\n              {activeBookings.map((booking) => <BookingCard key={booking.id} booking={booking} />)}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"completed\">\n            <div className=\"space-y-4\">\n              {completedBookings.map((booking) => <BookingCard key={booking.id} booking={booking} />)}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11049},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { StatsOverview } from \"@/components/StatsOverview\";\nimport { FleetMap } from \"@/components/FleetMap\";\nimport { PriorityAlerts } from \"@/components/PriorityAlerts\";\nimport { TodaysRoutes } from \"@/components/TodaysRoutes\";\nimport { RecentBookings } from \"@/components/RecentBookings\";\nimport { CustomerBookingPortal } from \"@/components/CustomerBookingPortal\";\nimport { RoutePlanning } from \"@/components/RoutePlanning\";\nimport { UnitStatusTable } from \"@/components/UnitStatusTable\";\nimport { Alert } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AlertTriangle, Download, Plus } from \"lucide-react\";\nimport type { FleetStats, RevenueStats, UnitWithTelemetry, Alert as AlertType, RouteWithStops, BookingWithCustomer } from \"@/types\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [alerts, setAlerts] = useState<AlertType[]>([]);\n\n  // Fetch fleet statistics\n  const { data: fleetStats, isLoading: fleetStatsLoading } = useQuery<FleetStats>({\n    queryKey: [\"/api/v1/analytics/fleet-stats\"],\n  });\n\n  // Fetch revenue statistics\n  const { data: revenueStats, isLoading: revenueStatsLoading } = useQuery<RevenueStats>({\n    queryKey: [\"/api/v1/analytics/revenue\"],\n  });\n\n  // Fetch units with telemetry\n  const { data: units = [], isLoading: unitsLoading } = useQuery<UnitWithTelemetry[]>({\n    queryKey: [\"/api/v1/units\"],\n  });\n\n  // Fetch today's routes\n  const { data: routes = [], isLoading: routesLoading } = useQuery<RouteWithStops[]>({\n    queryKey: [\"/api/v1/routes\"],\n  });\n\n  // Fetch recent bookings\n  const { data: bookings = [], isLoading: bookingsLoading } = useQuery<BookingWithCustomer[]>({\n    queryKey: [\"/api/v1/bookings\"],\n  });\n\n  // WebSocket for real-time updates\n  useWebSocket((message) => {\n    switch (message.type) {\n      case 'telemetry_update':\n        // Invalidate units query to refresh data\n        break;\n      case 'payment_success':\n        toast({\n          title: \"Payment Received\",\n          description: `Payment completed for booking ${message.bookingId}`,\n        });\n        break;\n    }\n  });\n\n  // Generate alerts based on unit data\n  useEffect(() => {\n    if (!units.length) return;\n\n    const newAlerts: AlertType[] = [];\n\n    units.forEach((unit) => {\n      const fillLevel = unit.latestTelemetry?.fillLevelPct || 0;\n      \n      if (fillLevel >= 85) {\n        newAlerts.push({\n          id: `fill-${unit.id}`,\n          type: 'urgent',\n          title: `Unit ${unit.serialNo} at ${fillLevel.toFixed(0)}% capacity`,\n          description: 'Requires immediate servicing',\n          unitId: unit.id,\n          location: unit.location,\n          timestamp: new Date(),\n        });\n      }\n\n      if (unit.status === 'offline') {\n        newAlerts.push({\n          id: `offline-${unit.id}`,\n          type: 'offline',\n          title: `Unit ${unit.serialNo} offline`,\n          description: 'Last seen over 2 hours ago',\n          unitId: unit.id,\n          location: unit.location,\n          timestamp: new Date(),\n        });\n      }\n    });\n\n    // Add maintenance alerts (simplified)\n    if (units.length > 0) {\n      newAlerts.push({\n        id: 'maintenance-due',\n        type: 'maintenance',\n        title: 'Maintenance due: Unit SSN-023',\n        description: 'Overdue by 2 days',\n        location: 'Karen, Nairobi',\n        timestamp: new Date(),\n      });\n    }\n\n    setAlerts(newAlerts.slice(0, 5)); // Limit to 5 alerts\n  }, [units]);\n\n  const handleScheduleService = (unitId: string) => {\n    toast({\n      title: \"Service Scheduled\",\n      description: \"Maintenance has been scheduled for this unit.\",\n    });\n  };\n\n  const handleViewDetails = (unitId: string) => {\n    // Navigate to unit details (would be implemented in a real app)\n    console.log(\"View details for unit:\", unitId);\n  };\n\n  const handleOptimizeRoutes = () => {\n    toast({\n      title: \"Routes Optimized\",\n      description: \"All routes have been re-optimized for efficiency.\",\n    });\n  };\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Page header */}\n        <div className=\"md:flex md:items-center md:justify-between\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-foreground sm:text-3xl sm:truncate\">\n              Fleet Dashboard\n            </h2>\n            <p className=\"mt-1 text-sm text-muted-foreground\">\n              Real-time monitoring of{\" \"}\n              <span className=\"font-medium\" data-testid=\"text-total-units\">\n                {fleetStats?.totalUnits || 0}\n              </span>{\" \"}\n              mobile sanitation units across Nairobi\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4 space-x-3\">\n            <Button\n              variant=\"outline\"\n              className=\"inline-flex items-center\"\n              data-testid=\"button-export-report\"\n            >\n              <Download className=\"-ml-1 mr-2 h-4 w-4\" />\n              Export Report\n            </Button>\n            <Button\n              className=\"inline-flex items-center\"\n              data-testid=\"button-add-unit\"\n            >\n              <Plus className=\"-ml-1 mr-2 h-4 w-4\" />\n              Add Unit\n            </Button>\n          </div>\n        </div>\n\n        {/* Alert Banner */}\n        {alerts.some(alert => alert.type === 'urgent') && (\n          <Alert className=\"mt-6 border-l-4 border-amber-400 bg-amber-50\" data-testid=\"alert-banner\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-amber-700\">\n                <strong>{alerts.filter(a => a.type === 'urgent').length} units require immediate servicing</strong> â€” High fill levels detected.\n              </p>\n            </div>\n          </Alert>\n        )}\n\n        {/* Stats Overview */}\n        {fleetStats && revenueStats && (\n          <div className=\"mt-6\">\n            <StatsOverview\n              fleetStats={fleetStats}\n              revenueStats={revenueStats}\n              isLoading={fleetStatsLoading || revenueStatsLoading}\n            />\n          </div>\n        )}\n\n        {/* Main Content Grid */}\n        <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Fleet Map */}\n          <FleetMap units={units} className=\"lg:col-span-2\" />\n\n          {/* Right Sidebar - Alerts and Routes */}\n          <div className=\"space-y-6\">\n            <PriorityAlerts alerts={alerts} />\n            <TodaysRoutes routes={routes} onOptimizeAll={handleOptimizeRoutes} />\n          </div>\n        </div>\n\n        {/* Bottom Section - Detailed Tables */}\n        <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <RecentBookings bookings={bookings} />\n          <div className=\"bg-card shadow rounded-lg border border-border p-6\">\n            <h3 className=\"text-lg font-medium text-foreground mb-4\">Fleet Performance</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <div className=\"flex justify-between text-sm mb-1\">\n                  <span className=\"text-muted-foreground\">Average Utilization</span>\n                  <span className=\"font-medium text-foreground\">\n                    {fleetStats?.averageUtilization.toFixed(0) || 0}%\n                  </span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div \n                    className=\"bg-primary h-2 rounded-full\" \n                    style={{ width: `${fleetStats?.averageUtilization || 0}%` }}\n                  ></div>\n                </div>\n              </div>\n              \n              <div>\n                <div className=\"flex justify-between text-sm mb-1\">\n                  <span className=\"text-muted-foreground\">Service Efficiency</span>\n                  <span className=\"font-medium text-foreground\">85%</span>\n                </div>\n                <div className=\"w-full bg-muted rounded-full h-2\">\n                  <div className=\"bg-accent h-2 rounded-full\" style={{ width: \"85%\" }}></div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4 mt-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-foreground\">24</div>\n                  <div className=\"text-xs text-muted-foreground\">Avg trips/day</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-foreground\">18m</div>\n                  <div className=\"text-xs text-muted-foreground\">Response time</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Customer Booking Portal */}\n        <div className=\"mt-8\">\n          <CustomerBookingPortal />\n        </div>\n\n        {/* Route Planning */}\n        <div className=\"mt-8\">\n          <RoutePlanning />\n        </div>\n\n        {/* Unit Status Table */}\n        <div className=\"mt-8\">\n          <UnitStatusTable\n            units={units}\n            onScheduleService={handleScheduleService}\n            onViewDetails={handleViewDetails}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9524},"client/src/pages/fleet-map.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { FleetMap } from \"@/components/FleetMap\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Filter, RefreshCw } from \"lucide-react\";\nimport type { UnitWithTelemetry } from \"@/types\";\n\nexport default function FleetMapPage() {\n  const { data: units = [], isLoading, refetch } = useQuery<UnitWithTelemetry[]>({\n    queryKey: [\"/api/v1/units\"],\n  });\n\n  const getLocationStats = () => {\n    const locationCounts = units.reduce((acc, unit) => {\n      const location = unit.location || \"Unknown\";\n      acc[location] = (acc[location] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return Object.entries(locationCounts).map(([location, count]) => ({\n      location,\n      count,\n      needsService: units.filter(u => \n        u.location === location && (u.latestTelemetry?.fillLevelPct || 0) >= 80\n      ).length,\n    }));\n  };\n\n  const locationStats = getLocationStats();\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Page header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-6\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-foreground sm:text-3xl sm:truncate\">\n              Fleet Map\n            </h2>\n            <p className=\"mt-1 text-sm text-muted-foreground\">\n              Real-time location and status monitoring for all units\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4 space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => refetch()}\n              data-testid=\"button-refresh-map\"\n            >\n              <RefreshCw className=\"-ml-1 mr-2 h-4 w-4\" />\n              Refresh\n            </Button>\n            <Button\n              variant=\"outline\"\n              data-testid=\"button-map-filters\"\n            >\n              <Filter className=\"-ml-1 mr-2 h-4 w-4\" />\n              Filters\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Main Map */}\n          <div className=\"lg:col-span-3\">\n            <FleetMap units={units} />\n          </div>\n\n          {/* Location Summary */}\n          <div className=\"space-y-6\">\n            <Card data-testid=\"card-location-summary\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-medium\">Location Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"space-y-2\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"h-12 bg-muted rounded animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {locationStats.map((stat) => (\n                      <div \n                        key={stat.location}\n                        className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n                        data-testid={`location-stat-${stat.location.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        <div className=\"flex items-center\">\n                          <MapPin className=\"h-4 w-4 text-muted-foreground mr-2\" />\n                          <div>\n                            <p className=\"text-sm font-medium text-foreground\">\n                              {stat.location}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {stat.count} units\n                            </p>\n                          </div>\n                        </div>\n                        {stat.needsService > 0 && (\n                          <Badge variant=\"destructive\" className=\"text-xs\">\n                            {stat.needsService} urgent\n                          </Badge>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-map-controls\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-medium\">Map Controls</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    View Mode\n                  </label>\n                  <Select defaultValue=\"status\">\n                    <SelectTrigger data-testid=\"select-view-mode\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"status\">Status View</SelectItem>\n                      <SelectItem value=\"routes\">Active Routes</SelectItem>\n                      <SelectItem value=\"bookings\">Booking Locations</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-foreground mb-2\">\n                    Status Filter\n                  </label>\n                  <Select defaultValue=\"all\">\n                    <SelectTrigger data-testid=\"select-status-filter\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Units</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent Only</SelectItem>\n                      <SelectItem value=\"available\">Available Only</SelectItem>\n                      <SelectItem value=\"offline\">Offline Only</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Button className=\"w-full\" data-testid=\"button-center-map\">\n                  <MapPin className=\"mr-2 h-4 w-4\" />\n                  Center on Fleet\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6484},"client/src/pages/maintenance.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { \n  Wrench, \n  Plus, \n  Calendar, \n  Clock, \n  AlertTriangle, \n  CheckCircle, \n  Filter,\n  Search\n} from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { MaintenanceLog, Unit } from \"@shared/schema\";\n\nconst maintenanceSchema = z.object({\n  unitId: z.string().min(1, \"Unit is required\"),\n  maintenanceType: z.string().min(1, \"Maintenance type is required\"),\n  description: z.string().min(5, \"Description must be at least 5 characters\"),\n  scheduledDate: z.string().min(1, \"Scheduled date is required\"),\n  cost: z.string().optional(),\n});\n\ntype MaintenanceFormData = z.infer<typeof maintenanceSchema>;\n\nconst maintenanceTypes = [\n  \"Routine Service\",\n  \"Deep Cleaning\",\n  \"Pump Maintenance\",\n  \"Door Repair\",\n  \"Sensor Calibration\",\n  \"Emergency Repair\",\n  \"Preventive Maintenance\",\n];\n\nexport default function MaintenancePage() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: maintenanceLogs = [], isLoading } = useQuery<MaintenanceLog[]>({\n    queryKey: [\"/api/v1/maintenance\"],\n  });\n\n  const { data: units = [] } = useQuery<Unit[]>({\n    queryKey: [\"/api/v1/units\"],\n  });\n\n  const { data: overdueUnits = [] } = useQuery<Unit[]>({\n    queryKey: [\"/api/v1/maintenance/overdue\"],\n  });\n\n  const form = useForm<MaintenanceFormData>({\n    resolver: zodResolver(maintenanceSchema),\n    defaultValues: {\n      unitId: \"\",\n      maintenanceType: \"\",\n      description: \"\",\n      scheduledDate: \"\",\n      cost: \"\",\n    },\n  });\n\n  const createMaintenanceMutation = useMutation({\n    mutationFn: async (data: MaintenanceFormData) => {\n      const maintenanceData = {\n        ...data,\n        scheduledDate: new Date(data.scheduledDate),\n        cost: data.cost ? parseFloat(data.cost) : undefined,\n      };\n      const response = await apiRequest(\"POST\", \"/api/v1/maintenance\", maintenanceData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Maintenance Scheduled\",\n        description: \"Maintenance has been scheduled successfully.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/maintenance\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to Schedule Maintenance\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'in_progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'scheduled':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-3 w-3 mr-1\" />;\n      case 'in_progress':\n        return <Clock className=\"h-3 w-3 mr-1\" />;\n      case 'scheduled':\n        return <Calendar className=\"h-3 w-3 mr-1\" />;\n      default:\n        return null;\n    }\n  };\n\n  const filteredLogs = maintenanceLogs.filter(log => {\n    const matchesSearch = searchQuery === \"\" || \n      log.maintenanceType.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      log.description?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || log.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const onSubmit = (data: MaintenanceFormData) => {\n    createMaintenanceMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Page header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-6\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-foreground sm:text-3xl sm:truncate\">\n              Maintenance Management\n            </h2>\n            <p className=\"mt-1 text-sm text-muted-foreground\">\n              Schedule and track maintenance activities for optimal fleet performance\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"inline-flex items-center\" data-testid=\"button-schedule-maintenance\">\n                  <Plus className=\"-ml-1 mr-2 h-4 w-4\" />\n                  Schedule Maintenance\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Schedule Maintenance</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"unitId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Unit</FormLabel>\n                          <Select onValueChange={field.onChange}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-maintenance-unit\">\n                                <SelectValue placeholder=\"Select unit\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {units.map((unit) => (\n                                <SelectItem key={unit.id} value={unit.id}>\n                                  {unit.serialNo} - {unit.location || 'Unknown location'}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"maintenanceType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Maintenance Type</FormLabel>\n                          <Select onValueChange={field.onChange}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-maintenance-type\">\n                                <SelectValue placeholder=\"Select type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {maintenanceTypes.map((type) => (\n                                <SelectItem key={type} value={type}>\n                                  {type}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"scheduledDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Scheduled Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"datetime-local\" {...field} data-testid=\"input-scheduled-date\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Describe the maintenance work required...\"\n                              {...field}\n                              data-testid=\"textarea-maintenance-description\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"cost\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Estimated Cost (KSh)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              placeholder=\"0.00\"\n                              {...field}\n                              data-testid=\"input-maintenance-cost\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end space-x-2 pt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsDialogOpen(false)}\n                        data-testid=\"button-cancel-maintenance\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={createMaintenanceMutation.isPending}\n                        data-testid=\"button-submit-maintenance\"\n                      >\n                        {createMaintenanceMutation.isPending ? \"Scheduling...\" : \"Schedule\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Overdue Units Alert */}\n        {overdueUnits.length > 0 && (\n          <Card className=\"mb-6 border-l-4 border-destructive bg-red-50\" data-testid=\"card-overdue-alerts\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 text-destructive mr-3\" />\n                <div>\n                  <p className=\"font-medium text-destructive\">\n                    {overdueUnits.length} units have overdue maintenance\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    These units require immediate attention to prevent service disruption\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Filters and Search */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search maintenance logs...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-maintenance\"\n                  />\n                </div>\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-maintenance-status-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Maintenance Logs */}\n        <Card data-testid=\"card-maintenance-logs\">\n          <CardHeader>\n            <CardTitle>Maintenance History</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(5)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"h-20 bg-muted rounded\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : filteredLogs.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Wrench className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-foreground mb-2\">No Maintenance Records</h3>\n                <p className=\"text-muted-foreground\">\n                  {searchQuery || statusFilter !== \"all\" \n                    ? \"No maintenance logs match your search criteria\"\n                    : \"Start by scheduling maintenance for your units\"\n                  }\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredLogs.map((log) => {\n                  const unit = units.find(u => u.id === log.unitId);\n                  \n                  return (\n                    <div\n                      key={log.id}\n                      className=\"border border-border rounded-lg p-4 hover:bg-muted/50 transition-colors\"\n                      data-testid={`maintenance-log-${log.id}`}\n                    >\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-2\">\n                            <h3 className=\"font-medium text-foreground\">{log.maintenanceType}</h3>\n                            <Badge className={getStatusColor(log.status)}>\n                              {getStatusIcon(log.status)}\n                              {log.status.replace('_', ' ')}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mb-2\">\n                            Unit: {unit?.serialNo || 'Unknown'} â€¢ {unit?.location || 'Unknown location'}\n                          </p>\n                          {log.description && (\n                            <p className=\"text-sm text-foreground\">{log.description}</p>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          {log.cost && (\n                            <p className=\"text-lg font-bold text-foreground\">\n                              KSh {Number(log.cost).toLocaleString()}\n                            </p>\n                          )}\n                          <p className=\"text-xs text-muted-foreground\">\n                            {log.scheduledDate \n                              ? formatDistanceToNow(new Date(log.scheduledDate), { addSuffix: true })\n                              : 'No date set'\n                            }\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <div className=\"flex items-center space-x-4\">\n                          {log.scheduledDate && (\n                            <div className=\"flex items-center text-muted-foreground\">\n                              <Calendar className=\"h-3 w-3 mr-1\" />\n                              Scheduled: {new Date(log.scheduledDate).toLocaleDateString()}\n                            </div>\n                          )}\n                          {log.completedDate && (\n                            <div className=\"flex items-center text-green-600\">\n                              <CheckCircle className=\"h-3 w-3 mr-1\" />\n                              Completed: {new Date(log.completedDate).toLocaleDateString()}\n                            </div>\n                          )}\n                        </div>\n                        {log.status === 'scheduled' && (\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-start-maintenance-${log.id}`}>\n                            Start Work\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18222},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/routes.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Route, Plus, Play, Pause, CheckCircle } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport type { RouteWithStops } from \"@/types\";\n\nexport default function RoutesPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: routes = [], isLoading } = useQuery<RouteWithStops[]>({\n    queryKey: [\"/api/v1/routes\"],\n  });\n\n  const generateRouteMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/v1/routes/daily\", {\n        operatorId: \"default-operator\",\n        maxDistance: 50,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Route Generated\",\n        description: \"New optimized route has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/routes\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to Generate Route\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRouteStatusMutation = useMutation({\n    mutationFn: async ({ routeId, status }: { routeId: string; status: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/v1/routes/${routeId}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/routes\"] });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'in_progress':\n        return 'bg-blue-100 text-blue-800';\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'scheduled':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const calculateProgress = (route: RouteWithStops) => {\n    if (route.stops.length === 0) return 0;\n    const completedStops = route.stops.filter(stop => stop.serviceCompleted).length;\n    return (completedStops / route.stops.length) * 100;\n  };\n\n  const formatDuration = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}h ${mins}m`;\n  };\n\n  const todaysRoutes = routes.filter(route => {\n    const today = new Date();\n    const routeDate = new Date(route.scheduledDate);\n    return routeDate.toDateString() === today.toDateString();\n  });\n\n  const upcomingRoutes = routes.filter(route => {\n    const today = new Date();\n    const routeDate = new Date(route.scheduledDate);\n    return routeDate > today;\n  });\n\n  const completedRoutes = routes.filter(route => route.status === 'completed');\n\n  return (\n    <div className=\"py-6\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Page header */}\n        <div className=\"md:flex md:items-center md:justify-between mb-6\">\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"text-2xl font-bold leading-7 text-foreground sm:text-3xl sm:truncate\">\n              Route Management\n            </h2>\n            <p className=\"mt-1 text-sm text-muted-foreground\">\n              Plan, optimize, and track service routes for maximum efficiency\n            </p>\n          </div>\n          <div className=\"mt-4 flex md:mt-0 md:ml-4\">\n            <Button\n              onClick={() => generateRouteMutation.mutate()}\n              disabled={generateRouteMutation.isPending}\n              className=\"inline-flex items-center\"\n              data-testid=\"button-generate-route\"\n            >\n              <Plus className=\"-ml-1 mr-2 h-4 w-4\" />\n              {generateRouteMutation.isPending ? \"Generating...\" : \"Generate Route\"}\n            </Button>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"today\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full max-w-md grid-cols-3\">\n            <TabsTrigger value=\"today\" data-testid=\"tab-today\">Today</TabsTrigger>\n            <TabsTrigger value=\"upcoming\" data-testid=\"tab-upcoming\">Upcoming</TabsTrigger>\n            <TabsTrigger value=\"completed\" data-testid=\"tab-completed\">Completed</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"today\" className=\"space-y-6\">\n            <div className=\"grid gap-6\">\n              {todaysRoutes.length === 0 ? (\n                <Card>\n                  <CardContent className=\"py-12 text-center\">\n                    <Route className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-foreground mb-2\">No Routes Today</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Generate optimized routes based on current unit status\n                    </p>\n                    <Button\n                      onClick={() => generateRouteMutation.mutate()}\n                      disabled={generateRouteMutation.isPending}\n                      data-testid=\"button-generate-first-route\"\n                    >\n                      Generate Today's Routes\n                    </Button>\n                  </CardContent>\n                </Card>\n              ) : (\n                todaysRoutes.map((route) => {\n                  const progress = calculateProgress(route);\n                  const completedStops = route.stops.filter(stop => stop.serviceCompleted).length;\n                  \n                  return (\n                    <Card key={route.id} data-testid={`card-route-${route.id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <CardTitle className=\"text-lg font-medium\">{route.name}</CardTitle>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {route.stops.length} stops â€¢ \n                              {route.estimatedDuration ? ` ${formatDuration(route.estimatedDuration)}` : ' Duration TBD'}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge className={getStatusColor(route.status)}>\n                              {route.status.replace('_', ' ').toLowerCase()}\n                            </Badge>\n                            {route.status === 'scheduled' && (\n                              <Button\n                                size=\"sm\"\n                                onClick={() => updateRouteStatusMutation.mutate({ \n                                  routeId: route.id, \n                                  status: 'in_progress' \n                                })}\n                                data-testid={`button-start-route-${route.id}`}\n                              >\n                                <Play className=\"h-3 w-3 mr-1\" />\n                                Start\n                              </Button>\n                            )}\n                            {route.status === 'in_progress' && (\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                onClick={() => updateRouteStatusMutation.mutate({ \n                                  routeId: route.id, \n                                  status: 'completed' \n                                })}\n                                data-testid={`button-complete-route-${route.id}`}\n                              >\n                                <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                Complete\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        {route.status === 'in_progress' && (\n                          <div className=\"mb-4\">\n                            <div className=\"flex justify-between text-sm mb-2\">\n                              <span>Progress</span>\n                              <span>{completedStops} of {route.stops.length} completed</span>\n                            </div>\n                            <Progress value={progress} className=\"h-2\" />\n                          </div>\n                        )}\n\n                        <div className=\"space-y-3\">\n                          <h4 className=\"font-medium text-foreground\">Route Stops</h4>\n                          {route.stops.map((stop, index) => (\n                            <div\n                              key={stop.id}\n                              className=\"flex items-center justify-between p-3 border border-border rounded-lg\"\n                              data-testid={`stop-${stop.id}`}\n                            >\n                              <div className=\"flex items-center space-x-3\">\n                                <div className=\"w-6 h-6 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-bold\">\n                                  {stop.stopOrder}\n                                </div>\n                                <div>\n                                  <p className=\"text-sm font-medium\">Unit {stop.unitId.slice(0, 8)}</p>\n                                  {stop.estimatedArrival && (\n                                    <p className=\"text-xs text-muted-foreground\">\n                                      ETA: {new Date(stop.estimatedArrival).toLocaleTimeString()}\n                                    </p>\n                                  )}\n                                </div>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                {stop.serviceCompleted ? (\n                                  <Badge className=\"bg-green-100 text-green-800\">\n                                    <CheckCircle className=\"h-3 w-3 mr-1\" />\n                                    Completed\n                                  </Badge>\n                                ) : (\n                                  <Badge variant=\"outline\">\n                                    Pending\n                                  </Badge>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"upcoming\" className=\"space-y-6\">\n            {upcomingRoutes.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <p className=\"text-muted-foreground\">No upcoming routes scheduled</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-6\">\n                {upcomingRoutes.map((route) => (\n                  <Card key={route.id} data-testid={`card-upcoming-route-${route.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <CardTitle className=\"text-lg font-medium\">{route.name}</CardTitle>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Scheduled for {new Date(route.scheduledDate).toLocaleDateString()}\n                          </p>\n                        </div>\n                        <Badge className={getStatusColor(route.status)}>\n                          {route.status}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {route.stops.length} stops planned\n                      </p>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"completed\" className=\"space-y-6\">\n            {completedRoutes.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <p className=\"text-muted-foreground\">No completed routes yet</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid gap-6\">\n                {completedRoutes.map((route) => (\n                  <Card key={route.id} data-testid={`card-completed-route-${route.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <CardTitle className=\"text-lg font-medium\">{route.name}</CardTitle>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Completed {formatDistanceToNow(new Date(route.scheduledDate), { addSuffix: true })}\n                          </p>\n                        </div>\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          Completed\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-muted-foreground\">Units Serviced:</span>\n                          <span className=\"ml-1 font-medium\">{route.stops.length}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-muted-foreground\">Duration:</span>\n                          <span className=\"ml-1 font-medium\">\n                            {route.actualDuration ? formatDuration(route.actualDuration) : 'N/A'}\n                          </span>\n                        </div>\n                      </div>\n                      {route.efficiency && (\n                        <div className=\"mt-2 text-sm\">\n                          <span className=\"text-muted-foreground\">Efficiency:</span>\n                          <span className=\"ml-1 font-medium text-accent\">{route.efficiency}%</span>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15078},"client/src/types/index.ts":{"content":"export interface FleetStats {\n  totalUnits: number;\n  activeUnits: number;\n  unitsNeedingService: number;\n  averageUtilization: number;\n}\n\nexport interface RevenueStats {\n  totalRevenue: number;\n  transactionCount: number;\n  averageBookingValue: number;\n}\n\nexport interface UnitWithTelemetry {\n  id: string;\n  serialNo: string;\n  model: string;\n  status: string;\n  location: string;\n  latitude: number;\n  longitude: number;\n  latestTelemetry?: {\n    fillLevelPct: number;\n    batteryVoltage: number;\n    temperature: number;\n    timestamp: Date;\n  };\n}\n\nexport interface Alert {\n  id: string;\n  type: 'urgent' | 'maintenance' | 'offline' | 'info';\n  title: string;\n  description: string;\n  unitId?: string;\n  location?: string;\n  timestamp: Date;\n}\n\nexport interface RouteWithStops {\n  id: string;\n  name: string;\n  status: string;\n  assignedStaffId?: string;\n  scheduledDate: Date;\n  estimatedDuration: number;\n  efficiency?: number;\n  stops: {\n    id: string;\n    unitId: string;\n    stopOrder: number;\n    estimatedArrival?: Date;\n    serviceCompleted: boolean;\n  }[];\n}\n\nexport interface BookingWithCustomer {\n  id: string;\n  serviceType: string;\n  startDate: Date;\n  location: string;\n  price: number;\n  paymentStatus: string;\n  bookingStatus: string;\n  customer: {\n    name: string;\n    phone: string;\n    email?: string;\n  };\n}\n\nexport interface WebSocketMessage {\n  type: 'telemetry_update' | 'payment_success' | 'unit_added' | 'maintenance_scheduled';\n  data?: any;\n  unitId?: string;\n  bookingId?: string;\n}\n","size_bytes":1518},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}